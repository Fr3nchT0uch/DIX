; ACME 0.96.4
; boot_unidisk.a
; by Grouik/French Touch and fenarinarsa/French Touch
;


!cpu 6502
!convtab "a2txti.bin"    ; incorporation table caractère APPLE II (normal) invert

; =============================================================================
; HARDWARE REQUIREMENTS
; Autodection setup

REQ_IIe = 0     ; 0 = IIc allowed / 1 = IIe required  (II/II+/IIgs will never pass)
REQ_PAL = 0     ; 0 = 60Hz allowed / 1 = 50Hz required
REQ_65C02 = 0   ; 0 = 6502 allowed / 1 = 65C02 required
UNIDISK = 1   ; 0 = Disk II drive / 1 = UNIDISK

; =============================================================================
; ZEROPAGE
; -------------------------------------
; USED IN ALL PARTS
bCPU        = $01
bSLOT       = $02   ; numero SLOT * 0x10
bIIc_detect = $03
     
; UNIDISK
UNIDISK_PARAMS  = $42   ; struct to load blocks from the Unidisk    
SP_DEVICE = $43
SP_DEST = $44
SP_BLOCK = $46

DEBUGCHAR = $7D0
MENU = $D000

MB_BASEADDR        = $10   ; +$11

; -------------------------------------
; PART SPECIFIC
; Temp

Temp        = $FF
; =============================================================================
; CONSTANTES SYSTEME
VERTBLANK   = $C019 ;
; -------------------------------------
; CONSTANTES
MAIN        = $1000     ; main program to run once boot.b is done
;FLOAD       = $FC00     ; where to put the FLOAD routine
; -------------------------------------

        *= $800 ; ORG = $800

        !byte 01

START
!zone
      

INIT    STX bSLOT       ; on sauvegarde le numero du SLOT*0x10

        JSR $FC58       ; HOME (ROM)

        ; Text
        LDX #39
-       LDA TEXT,X
        STA $400,X
        DEX
        BPL -
        ; jingle / Tribute to 'Déplombage Mode d'Emploi' / Godfather (code from DPME III)
        LDY #$D0
-       BIT $C030
        LDA #$09
        JSR $FCA8
        DEY
        BNE -
        LDX #02
        STX $FF
--      LDY #$D0
-       BIT $C030
MODJING LDA #$07
        JSR $FCA8
        DEY
        BNE -
        LDA #$05
        STA MODJING+1
        DEC $FF
        BNE --
 
      ;  LDA #'0'
	;STA DEBUGCHAR

 
        ; ---------------------

        ; APPLE II MODEL DETECTION
        LDX #'A'
        LDA $FBB3
        CMP #$06                ; IIe/IIc/IIGS = 06 
        BEQ +
-       JMP BADGUY  	        ; sinon II ($38) ou II+ ($EA) => bad guy1
+       ; IIc ?

        LDA $FBC0               ; détection IIc
        STA bIIc_detect         ; for main.a
!if REQ_IIe=1 {
        BEQ -                   ; 0 = IIc => bad guy2
}
        ; IIgs ou IIe ? 
        SEC
        JSR $FE1F               ; TEST GS 
        BCS +
        JMP BADGUY              ; si Carry not set IIGS => bad guy3
+

      ;  LDA #'1'
	;STA DEBUGCHAR

        ; MOCKINGBOARD DETECTION (->OUT2)
        LDA #$FF
        STA $C403       ; activate MB 4c (IIc)
        STA $C404

        LDA #00
        STA MB_BASEADDR          
bdet    LDA #$07                ; on commence en $C7 jusqu'en $C1
        ORA #$C0                ; -> $Cx
        STA MB_BASEADDR+1
        LDY #04                 ; $CX04
        LDA (MB_BASEADDR),Y            ; timer 6522 (Low Order Counter) - attention compte à rebour !
        STA Temp                ; 3 cycles
        LDA (MB_BASEADDR),Y            ; + 5 cycles = 8 cycles entre les deux accès au timer
        SEC                     ; 
        SBC Temp                ; 
        CMP #$F8                ; -8 (compte à rebour) ?
        BEQ +
        DEC bdet+1              ; on décrémente le "slot" pour tester le suivant
        BNE bdet                ; on boucle de 7 à 1
        LDX #'M'
        JMP BADGUY              ; on est arrivé au SLOT0 donc pas de MB!
+       
;* added to prevent bug during fload if Reboot with CTRL-OA-RESET during INT active 
            ; => first CLI encountered re-enable previous INT from before the reboot!!!*
        LDA #%01100000              ; disable all INT (T1/T2/6522-1)
        LDY #$E
        STA (MB_BASEADDR),Y          ; VIA_IER/1
        LDY #$8E
        STA (MB_BASEADDR),Y          ; * IF INT from AY2 is used, uncomment this line too ***

   ;     LDA #'2'
	;STA DEBUGCHAR
        ; 65C02 CPU DETECTION
        LDA #0
        STA bCPU
        LDX #'C'
        SED             ; BCD mode
        LDA #$99
        CLC
        ADC #$01
 !if REQ_65C02=1 {
        BMI BADGUY      ; 6502
 }
        BMI +
        INC bCPU
+       CLD             ; binary mode

    ;    LDA #'3'
	;STA DEBUGCHAR

        LDA $C083
        LDA $C083		; write/read to RAM bank2 (Langage Card)

      ;  LDA #'4'
	;STA DEBUGCHAR

        ; LOADING DEMO WITH THE SMARTPORT ROM. FROM BLOCK 1++
        LDX #$05
-       LDA SP_PARAMS,X
        STA UNIDISK_PARAMS,X
        DEX
        BPL -
        LDA bSLOT
        STA $43
        LSR
        LSR
        LSR
        LSR
        ORA #$C0
        STA modread+2
        JSR READ_FILE   ; load move.b

        JMP MENU       ; menu


READ_FILE
        LDX bSLOT
modread JSR $C50A      ; read 1 block
        INC SP_BLOCK         ; next block
        BNE +
        INC SP_BLOCK+1  
+       INC SP_DEST+1         ; RAM +512 bytes
        INC SP_DEST+1
        DEC SP_BLOCKS2READ
        BNE READ_FILE
        RTS

SP_PARAMS
        !byte 01        ; read ($42)
        !byte 50        ; drive 1 slot 5 ($43)
        !byte <MENU, >MENU   ; RAM destination ($44-$45)
        !byte 01, 00    ; block #1  ($46-$47)
SP_BLOCKS2READ
        !byte 8        ; nb of 512 bytes blocks to read


BADGUY  STX $403        ; Error code. A=Apple II model, C=CPU, M=Mockingboard
        LDA #'K'
        STA $400
        LDA #'O'
        STA $401
-       BNE -             ; stopping here


TEXT 		!text ":             FRENCH TOUCH             :",00

