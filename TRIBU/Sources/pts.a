; ACME 0.96.4
; PT3 Turbo Sound (aka PT3 6 CHANNELS) player for 6502. 
; APPLE IIE (6502) version (assumed with Mockingboard in Slot#4)
; Translated and adapted from Z80 Code.
; by GROUiK/FRENCH TOUCH - 2020
; http://fr3nch.t0uch.free.fr/
; 
; ZX Spectrum Player Original Code (c)2004-2007 S.V.Bulba <vorobey@mail.khstu.ru> 
; (with Ivan Roshin for some parts/algorithm)
; http://bulba.untergrund.net/
;
;
!cpu 6502 
!sl "lbl_pts.txt"
!convtab "a2txt.bin" ; 
; =======================================================================================
Release = "0"
; 
; v0.12 - First released version - including ROUT 4xAY and ROUT 2xAY (inactive)
; =======================================================================================
; ORG
            *= $8000 
; -------------------------------------
; ZERO PAGE
; -------------------------------------
MB_BASEADDR2 = $16 ;16b

z80_A       = $70
z80_C       = $71
z80_B       = $72
z80_E       = $73
z80_D       = $74
z80_L       = $75
z80_H       = $76
z80_IX      = $77       ; +$78
z80_IY      = $79       ; +$7A
z80_AP      = $7B
val1        = $7C       ; +$7D
val2        = $7E       ; +$7F

TA1 = val1
TA2 = val1+1
TB1 = val2
TB2 = val2+1
TC1  = z80_L
TC2  = z80_H
TB3  = z80_E
TC3  = z80_D
; -------------------------------------

;Entry and other points
START   ; module1 address in z80_H/z80_L | [optional TS only] module2 address in z80_D/z80_E
	    JMP INIT    ; initialization with module address in HL [and DE (TS)]                              
        JMP PLAY    ; play one quark                                                    
        JMP MUTE    ; mute

SETUP	; setup and status flags
        !byte 0 
        ; set bit0, if you want to play without looping
	    ; [optional]:
	    ; bit1: (unused)
        ; bits2-3: (unused)
	    ; bits4-5: %00-no TS, %01-2 modules TS, %10-autodetect PT3 TS-format by AlCo (PT 3.7+);
	    ; Remark: old PT3 TS-format by AlCo (PT 3.6) is not documented and must be converted to new standard!
	    ; bit6 is set each time, when loop point of 2nd TS module is passed (optional).
	    ; bit7 is set each time, when loop point of 1st TS or of single module is passed (optional).

;Identifier
	    !text ">PT3/TS-Player r.",Release,"<"
; =======================================================================================
CHECKLP	
	    LDY #ModNum                                 
        LDA (z80_IY),Y
        BIT BITTABLE+0
	    BEQ CHL1                                    
        LDA SETUP                                   
        ORA #%01000000
        STA SETUP
	    JMP CHL2                                    
CHL1	
        LDA SETUP                                   
        ORA #%10000000
        STA SETUP
CHL2	
        LDA SETUP                                   
        BIT BITTABLE+0                              
        BNE +
        RTS                                         
+	    PLA                                         
        PLA
        LDY #DelyCnt                                
        LDA (z80_IY),Y
        CLC
        ADC #01
        STA (z80_IY),Y
	    LDY #(ChanA+NtSkCn)                         
        LDA (z80_IY),Y
        CLC
        ADC #01
        STA (z80_IY),Y
	    LDA #00                                     
	    LDY #(AYREGS+AmplA)                         
        STA (z80_IY),Y
        INY
	    STA (z80_IY),Y                              
        INY
	    STA (z80_IY),Y                              
	    RTS                                         
; =======================================================================================
MUTE	
        LDA #00                                     
	    STA VARS1+AYREGS+AmplA                      
	    STA VARS1+AYREGS+AmplB                      
        STA VARS1+AYREGS+AmplC
        STA VARS2+AYREGS+AmplA                      
	    STA VARS2+AYREGS+AmplB                      
        STA VARS2+AYREGS+AmplC
	    JMP ROUT                                    
; =======================================================================================
INIT
        LDA MB_BASEADDR2+1
        BEQ +
        LDA #<ROUT2     ; enable 2 MB playout
        STA ROUT+1
        LDA #>ROUT2
        STA ROUT+2
        ; -------------------------------
+       LDA #%00010001      ; no loop | 2 modules TS
        ;LDA #%00100000      ; loop | TS AlCo
        STA SETUP
        LDA #<MD1LADDR                                               
        STA z80_L
        LDA #>MD1LADDR
        STA z80_H
        LDA #<MD2LADDR                                               
        STA z80_E
        LDA #>MD2LADDR
        STA z80_D       
        ; -------------------------------
;HL - AddressOfModule
;DE - AddresOf2ndModule
	    LDA z80_E                                   
        PHA
        LDA z80_D                                  
        PHA
        LDA #<VARS1                                 
        STA z80_IY
        LDA #>VARS1
        STA z80_IY+1
        ; HL = AddressOfModule
	    JSR INITPT3                                 
        PLA                                         
        STA z80_H
        PLA
        STA z80_L
        ; HL = AddresOf2ndModule
	; Use version and tone table of 1st module
	    LDY #13                    
        LDA (z80_IX),Y
        SEC                                                         
        SBC #$30            ; ascii value - $30 = version number (1-7)
	    BCC L20             ; inverse (pour SUB aussi)                  
	    CMP #10                                                     
	    BCC L21             ; < 10                                      
L20	    
        LDA #6              ; version par defaut si incorrect           
L21	    
        STA Version+1                                               
	    PHA                 ; save version nb (VolTable version)
        CMP #4              ; version 4 ?                               
        BCC +               ; < 4 (inverse carry)
        CLC
        BCC ++              ; always
+       SEC
++      LDY #99                 
        LDA (z80_IX),Y  
        ROL                 ; carry !                                   
	    AND #7              ; clear all bit except 0-1-2                
	    PHA                 ; save NoteTable number
	    LDA #<VARS2                                 
        STA z80_IY
        LDA #>VARS2
        STA z80_IY+1
        LDA SETUP                                   
	    AND #48                                     
	    BEQ NOTS                                    
	    CMP #16                                     
	    BEQ TwoPT3s                                 
	    LDA Version+1                               
	    CMP #7                                      
	    BCC NOTS                                    
	    LDY #98                                     
        LDA (z80_IX),Y
        STA z80_A           ; save A
	    CMP #$20                                    
	    BEQ NOTS                                    
                                                    
	                                                
	    LDX #VRS                                    
-	    LDA VARS1,X                                 
        STA VARS2,X
        DEX
        BNE -
        LDY #ModNum                                 
        LDA (z80_IY),Y
        ORA #%00000010
        STA (z80_IY),Y
	    LDA z80_A                                   
        STA z80_C
	    ASL                                         
	    CLC                                         
        ADC z80_C
	    SEC                                         
        SBC #2
	    STA TSSub+1                                 
	    JMP AlCoTS_                                 
TwoPT3s	
        JSR INITPT3                                 
AlCoTS_	
        LDA #01                                     
	    STA is_ts                                   
        LDY #ModNum                                 
        LDA (z80_IY),Y
        ORA #%00000001
        STA (z80_IY),Y
NOTS	

    ; A = 0 here
	    LDA #$01                                    
        STA V1DelyCnt                               
	    STA V2DelyCnt                               
	    STA V1ANtSkCn                               
        STA V1BNtSkCn
        STA V1CNtSkCn
        STA V2ANtSkCn
        STA V2BNtSkCn
        STA V2CNtSkCn
        LDA #$F0                                    
        STA V1AVolume                               
	    STA V1BVolume                               
	    STA V1CVolume 
        STA V2AVolume                               
	    STA V2BVolume                               
	    STA V2CVolume 
	    LDA #<PT3EMPTYORN
        STA V1AdInPtA
        STA V2AdInPtA
        STA V1AOrnPtr                               
        STA V1BOrnPtr
        STA V1COrnPtr
	    STA V2AOrnPtr                               
        STA V2BOrnPtr
        STA V2COrnPtr
        LDA #>PT3EMPTYORN
        STA V1AdInPtA+1
        STA V2AdInPtA+1
        STA V1AOrnPtr+1                             
        STA V1BOrnPtr+1
        STA V1COrnPtr+1
	    STA V2AOrnPtr+1                             
        STA V2BOrnPtr+1
        STA V2COrnPtr+1
	    PLA                                         
        STA z80_A

;NoteTableCreator (c) Ivan Roshin
;A - NoteTableNumber*2+VersionForNoteTable
;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)

     	LDA #<NT_DATA											    
     	STA z80_L
     	LDA #>NT_DATA
     	STA z80_H
     	LDA #<T1_													
     	STA z80_C
     	LDA #>T1_
     	STA z80_B
     	LDA #00
        TAY                 ; LDY #00	        
     	STA z80_D
     	LDA z80_A           ; restore A	 (table number)								
     	ASL															
     	STA z80_E													
     	CLC                                                         
        ADC z80_L
        STA z80_L
        LDA z80_D
        ADC z80_H
        STA z80_H													
     	LDA (z80_L),Y												
     	STA z80_E
     	INC z80_L                                                   
        BNE +
        INC z80_H
+       LSR z80_E											    				     				
		BCS +		        ; si c = 0 => $EA (NOP) / si c = 1 => $18 (CLC)
    	LDA #$EA 	        ; -> $EA (NOP)
        BNE ++		        ; always	
+		LDA #$18	        ; -> $18 (CLC) 									
++	    STA L3		            									
		LDA z80_E													
		LDX z80_L
		STA z80_L
		STX z80_E
		LDA z80_D
		LDX z80_H
		STA z80_H
		STX z80_D
		CLC                                                         
    	LDA z80_C
    	ADC z80_L
    	STA z80_L
    	LDA z80_B
    	ADC z80_H
    	STA z80_H
	    LDA (z80_E),Y												
	    CLC                                                         
        ADC #<T_
	    STA z80_C
        PHA                                                   
        ADC #>T_                                                    
	    SEC                                                         
        SBC z80_C
        STA z80_B                                                   												
	    PHA
	    LDA #<NT_											
	    STA z80_E
	    PHA															
	    LDA #>NT_
	    STA z80_D
	    PHA
	    LDA #12														
	    STA z80_B
L1	    
        LDA z80_C													
	    PHA
	    LDA z80_B
	    PHA
	    LDA (z80_L),Y												
	    STA z80_C
	    INC z80_L                                                   
        BNE +
        INC z80_H
+       LDA z80_L												    
	    PHA
	    LDA z80_H
	    PHA
	    LDA (z80_L),Y												
	    STA z80_B
	    LDA z80_E       												
	    STA z80_L
        PHA
	    LDA z80_D
	    STA z80_H
        PHA
	    LDA #<23		    										
	    STA z80_E
	    LDA #>23
	    STA z80_D
	    LDA #8														
	    STA z80_IX+1        
L2	    
        LSR z80_B													
	    ROR z80_C													
L3	    
	    !byte $AC			; CLC ($18) or NOP ($EA)
	    LDA z80_C													
	    ADC #00  		    								    	
	    STA (z80_L),Y												
	    INC z80_L                                                   
        BNE +
        INC z80_H
+       LDA z80_B													
	    ADC #00 													
	    STA (z80_L),Y												
	    CLC                                                         
        LDA z80_E
        ADC z80_L
        STA z80_L
        LDA z80_D
        ADC z80_H
        STA z80_H
	    DEC z80_IX+1											    
	    BNE L2														
	    PLA															
	    STA z80_D
	    PLA         
        ADC #02     
        STA z80_E   
        BCC +     
        INC z80_D 
+       PLA												    	    
	    STA z80_H
	    PLA
	    STA z80_L
	    INC z80_L                                                   
        BNE +
        INC z80_H
+       PLA												    	    
	    STA z80_B
	    PLA
	    STA z80_C
	    DEC z80_B													
	    BEQ +
        JMP L1
+       PLA															
	    STA z80_H
	    PLA
	    STA z80_L
	    PLA															
	    STA z80_D
	    PLA
	    STA z80_E			
	    CMP #<TCOLD_1		        								
        BNE CORR_1													
	    LDA #$FD													
	    STA NT_+$2E
CORR_1	
        CLC                                                         
        LDA (z80_E),Y																										
	    BEQ TC_EXIT													
	    ROR															
	    PHP			        ; save carry														
	    ASL															
	    STA z80_C													
	    CLC                                                         
        ADC z80_L
        STA z80_L
        LDA z80_B
        ADC z80_H
        STA z80_H                                
	    PLP                 ; restore carry (du ROR)	                
	    BCC CORR_2                                                  
	    LDA (z80_L),Y												
	    SEC															
	    SBC #$02
	    STA (z80_L),Y
CORR_2	
        LDA (z80_L),Y												
	    CLC			
	    ADC #$01
	    STA (z80_L),Y
        SEC   		                                                
	    LDA z80_L                                                   
	    SBC z80_C
	    STA z80_L
	    LDA z80_H
	    SBC z80_B
	    STA z80_H
	    INC z80_E                                                   
        BNE +
        INC z80_D
+       JMP CORR_1												    
TC_EXIT
	    PLA			    ; restore version number

;VolTableCreator (c) Ivan Roshin
;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
;5.. - 3.5x..3.6x..VTII1.0)

	    CMP #5		    ; version 										
	    LDA #<$11                                                   
	    STA z80_L
        LDA #>$11													
	    STA z80_H													
	    STA z80_D                                                   
	    STA z80_E													
	    LDA #$2A	    ; ($2A = ROL A)								    
	    BCS +		    ; CP -> carry inverse (from CP #5)					
	    DEC z80_L													
	    LDA z80_L													
	    STA z80_E
	    LDA #$EA	    ; ($EA = NOP)			    					
+       STA M2														
	    LDA #<(VT_+16)												
	    STA z80_IX
	    LDA #>(VT_+16)
	    STA z80_IX+1
	    LDA #$0F													
	    STA z80_C
INITV2  
        CLC
        LDA z80_L													
	    PHA
        ADC z80_E
        STA z80_E
	    LDA z80_H
	    PHA
        ADC z80_D
        STA z80_D
        LDA #00														
	    STA z80_L
	    STA z80_H
        LDX #$10
        CLC
INITV1  
        LDA z80_L
M2          
        !byte $AC	    ; $EA (nop) ou $2A (ROL)
	    LDA z80_H													
	    ADC #00			; + carry                                  	
	    STA (z80_IX),Y												
	    INC z80_IX                                                  
        BNE +
        INC z80_IX+1
+       CLC                                                         
        LDA z80_E
        ADC z80_L
        STA z80_L
        LDA z80_D
        ADC z80_H
        STA z80_H
        CLC             ; needed ?!
	    DEX
	    BNE INITV1

        PLA															
	    STA z80_H
	    PLA
	    STA z80_L
	    LDA z80_E													
	    CMP #$77													
	    BNE M3														
	    INC z80_E													
M3      
        DEC z80_C                                   
	    BNE INITV2                                  
	    JMP ROUT        ; END of INIT               

INITPT3	
        LDA z80_L
        PHA                                         
        STA z80_IX
        LDY #MODADDR                                
        STA (z80_IY),Y
	    INY                                         
        LDA z80_H
        PHA
        STA z80_IX+1                                
        STA (z80_IY),Y        
	    LDA #<100                                   
        STA z80_E
        LDA #>100
        STA z80_D                                   
	    CLC                                         
        LDA z80_E
        ADC z80_L
        STA z80_L
        LDA z80_H
        ADC #00         ; D = 0
        STA z80_H                                   
        LDY #00
	    LDA (z80_L),Y                               
	    LDY #Delay                                  
        STA (z80_IY),Y
	    CLC                                         
        LDA z80_E
        ADC z80_L
        STA z80_L
        LDA z80_H
        ADC #00         ; D = 0
        STA z80_H                                   
	    JSR SETCPPT                                 
	    LDY #102                                    
        LDA (z80_IX),Y
        STA z80_E
	    INC z80_L                                                       
        BNE +
        INC z80_H
+	    LDY #PosSub                                 
        LDA z80_L
        STA (z80_IY),Y
        CLC                                         
        LDA z80_E
        ADC z80_L
        STA z80_L
        LDA z80_H
        ADC #00         ; D = 0
        STA z80_H                                   
	    LDY #LPosPtr                                
        LDA z80_L
        STA (z80_IY),Y
	    INY                                         
        LDA z80_H
        STA (z80_IY),Y
	    PLA                                         
        STA z80_D
        PLA
        STA z80_E                                   
        CLC
	    LDY #103               
        LDA (z80_IX),Y                              
        ADC z80_E
        STA z80_L
	    INY               
        LDA (z80_IX),Y                              
        ADC z80_D
        STA z80_H
        LDY #PatsPtr                                
        LDA z80_L
        STA (z80_IY),Y
	    INY                                         
        LDA z80_H
        STA (z80_IY),Y
	    LDA #<169                                   
        CLC
	    ADC z80_E                                   
        STA z80_L
        LDA #>169
        ADC z80_D
        STA z80_H
	    LDY #OrnPtrs                                
        LDA z80_L
        STA (z80_IY),Y
	    INY                                         
        LDA z80_H
        STA (z80_IY),Y
	    LDA #<105                                   
        CLC
	    ADC z80_E                                   
        STA z80_L
        LDA #>105
        ADC z80_D
        STA z80_H 
        LDY #SamPtrs                                
        LDA z80_L
        STA (z80_IY),Y
	    INY                                         
        LDA z80_H
        STA (z80_IY),Y
	    RTS                                         
; =======================================================================================
SETCPPT
        LDY #CrPsPtr                                
        LDA z80_L
        STA (z80_IY),Y
	    INY                                         
        LDA z80_H
        STA (z80_IY),Y
	    RTS                                         
SETESLD
        LDY #CurESld                                
        LDA z80_L
        STA (z80_IY),Y
	    INY                                         
        LDA z80_H
        STA (z80_IY),Y
	    RTS    

GETIX	
        LDA z80_IY                                  
	    STA z80_IX                                  
        LDA z80_IY+1
        STA z80_IX+1
	    CLC                                         
        LDA z80_IX
        ADC z80_E
        STA z80_IX
        LDA z80_IX+1
        ADC z80_D
        STA z80_IX+1
	    RTS                                         

PTDECOD 
        JSR GETIX                                   
	    JMP PT3PD                                   
; =======================================================================================
;PT3 pattern decoder
PD_OrSm	
        LDY #Env_En     										    
	    LDA #00
	    STA (z80_IX),Y
	    JSR SETORN	
PD_SAM_	
        LDY #00												
	    LDA (z80_C),Y
	    INC z80_C                                                   
        BNE +
        INC z80_B
+       LSR 													    
        BCC +
        ORA #$80
+     
PD_SAM	
        ASL                                         
	    STA z80_E                                   
	    LDA #00                                     
        STA z80_D
        CLC
	    LDY #SamPtrs                                
        LDA (z80_IY),Y
        ADC z80_E
        STA z80_L
	    INY                                         
        LDA (z80_IY),Y
        ADC #00         ; D = 0
        STA z80_H
	    LDY #00
	    LDA (z80_L),Y                               
        STA z80_E
        INY                                         
        LDA (z80_L),Y
	    STA z80_D                                   
        CLC
	    LDY #MODADDR                                
        LDA (z80_IY),Y
        ADC z80_E
        STA z80_L
	    INY                                         
        LDA (z80_IY),Y
        ADC z80_D
        STA z80_H        
        LDY #SamPtr
	    LDA z80_L                                   
        STA (z80_IX),Y
	    INY                                         
        LDA z80_H
        STA (z80_IX),Y
	    JMP PD_LOOP                                 
PD_VOL	
        ASL											
        ADC #00
	    ASL															
        ADC #00
	    ASL															
        ADC #00
	    ASL															
        ADC #00
        LDY #Volume
        STA (z80_IX),Y                              
	    JMP PD_LP2                                  
PD_EOff	
        LDY #Env_En		    	        			
	    STA (z80_IX),Y
	    LDY #PsInOr   			    				
	    STA (z80_IX),Y
	    JMP PD_LP2		
PD_SorE	
        SEC											
	    SBC #01
        STA z80_A
	    BNE PD_ENV									
	    LDY #00			       						
	    LDA (z80_C),Y
	    INC z80_C                                   
        BNE +
        INC z80_B
+       LDY #NNtSkp    		        				
	    STA (z80_IX),Y
        JMP PD_LP2		
PD_ENV	
        JSR SETENV                                  
	    JMP PD_LP2                                  
PD_ORN	
        JSR SETORN                                  
	    JMP PD_LOOP                                 
PD_ESAM	
        LDY #Env_En	             					
	    STA (z80_IX),Y
	    LDY #PsInOr	    		        			
	    STA (z80_IX),Y
	    LDA z80_A           
        BEQ +										
	    JSR SETENV
+	    JMP PD_SAM_                                 
PT3PD	
        LDY #Note   							    
	    LDA (z80_IX),Y
	    STA PrNote+1												
	    LDY #CrTnSl    		    						    		
	    LDA (z80_IX),Y                                              
	    STA PrSlide+1												
        INY 
	    LDA (z80_IX),Y											
	    STA PrSlide+8
PD_LOOP	
        LDA #$10													
	    STA z80_E
PD_LP2	
        LDY #00			    										
	    LDA (z80_C),Y
	    INC z80_C                                                   
        BNE +
        INC z80_B
+	    CLC															
	    ADC #$10
	    BCC +
        STA z80_A            
        JMP PD_OrSm
+       ADC #$20                                                    
	    BNE +													
        JMP PD_FIN
+   	BCC +													    
        JMP PD_SAM
+	    ADC #$10                                                    
	    BEQ PD_REL													
	    BCC + 													
        JMP PD_VOL
+	    ADC #$10                                                    
	    BNE +										    			
        JMP PD_EOff
+	    BCC	+												    	
	    JMP PD_SorE
+       ADC #96                                                     
	    BCS PD_NOTE													
	    ADC #$10                                                    
	    BCC +
        STA z80_A												    	
        JMP PD_ORN													
+	    ADC #$20                                                    
	    BCS PD_NOIS													 														
	    ADC #$10                                                    
        BCC +
        STA z80_A												    	
        JMP PD_ESAM
+	    ASL															
	    STA z80_E
        CLC                                                   
        ADC #<(SPCCOMS+$FF20)							        
        STA z80_L
	    LDA #>(SPCCOMS+$FF20)
        ADC #00
	    STA z80_H
        ; on doit inverser le PUSH car l'adresse sera utilisée après RTS
        LDY #01	
	    LDA (z80_L),Y												
	    PHA             ; push D
	    DEY                                                         
	    LDA (z80_L),Y										        
	    PHA             ; push E
	    JMP PD_LOOP
PD_NOIS	
        LDY #Ns_Base                                
        STA (z80_IY),Y
	    JMP PD_LP2                                  
PD_REL	
        LDY #Flags   								
	    LDA (z80_IX),Y
	    AND #%11111110
	    STA (z80_IX),Y
	    JMP PD_RES									
PD_NOTE	
        LDY #Note    	 				    		
	    STA (z80_IX),Y	
	    LDY #Flags      							
	    LDA (z80_IX),Y
	    ORA #%00000001
	    STA (z80_IX),Y								
PD_RES												
        LDA #00	
        STA z80_L
	    STA z80_H
	    LDY #11
-	    STA (z80_IX),y          
	    DEY
        BPL -
PD_FIN	
	    LDY #NNtSkp     						    
	    LDA (z80_IX),Y
	    LDY #NtSkCn     		    				
	    STA (z80_IX),Y
	    RTS
C_PORTM 
        LDY #00                                     
        LDA (z80_C),Y
	    STA z80_A       ; save A                    
        CLC
        LDA z80_C                                   
        ADC #03
        STA z80_C
        BCC +
        INC z80_B
+       LDA (z80_C),Y                               
        STA LoStep+1                                
	    INC z80_C                                   
        BNE +
        INC z80_B
+       LDA (z80_C),Y                               
	    STA z80_AP      ; save A+carry (AP)         
        INC z80_C                                   
        BNE +
        INC z80_B
+       LDY #CrTnSl                                 
        LDA (z80_IX),Y
        STA z80_L
	    INY                                         
        LDA (z80_IX),Y
        STA z80_H

;Set portamento variables
;A - Delay; A' - Hi(Step); ZF' - (A'=0); HL - CrTnSl
;SETPORT
        LDY #Flags  												
	    LDA (z80_IX),Y
	    AND #%11111011
	    STA (z80_IX),Y                              
        LDA z80_A           ; restore A
        LDY #TnSlDl     				    		
	    STA (z80_IX),Y
        LDY #TSlCnt	        			    		
	    STA (z80_IX),Y
        LDA z80_L                                   
        PHA
        LDA z80_H                                  
        PHA
        LDA #<NT_									
	    STA z80_E
	    LDA #>NT_           
	    STA z80_D
	    LDY #Note	        						
	    LDA (z80_IX),Y
	    LDY #SlToNt         						
	    STA (z80_IX),Y
	    ASL																																																				
	    CLC                                         
        ADC z80_E           
        STA z80_L
        LDA z80_D           
        ADC #00           
        STA z80_H
        LDY #00	
	    LDA (z80_L),Y 								
	    PHA	
	    INY                                         
	    LDA (z80_L),Y 								
	    PHA
PrNote	
        LDA #$AC													
	    LDY #Note   					    						
	    STA (z80_IX),Y
	    ASL																																			
	    CLC                                                         
        ADC z80_E           
        STA z80_L
        LDA z80_D           
        ADC #00
        STA z80_H
	    LDY #00
        LDA (z80_L),Y												
	    STA z80_E
	    INY                                                         
	    LDA (z80_L),Y											    
	    STA z80_D
	    LDY #TnDelt 
        PLA															
	    STA z80_H
	    PLA       
	    SEC                                                                                                       
        SBC z80_E
        STA z80_L
        STA (z80_IX),y
        LDA z80_H
        SBC z80_D
        STA z80_H 
        INY                                                         
        STA (z80_IX),y
        PLA                                         
        STA z80_D
        PLA
        STA z80_E
Version
	    LDA #$AC                                    
	    CMP #6                                      
	    BCC OLDPRTM     ; < 6
        LDY #CrTnSl                                 
PrSlide	
        LDA #$AC                                    
        STA z80_E
        STA (z80_IX),Y
        INY
        LDA #$AC
        STA z80_D
        STA (z80_IX),Y
OLDPRTM	
LoStep
        LDA #$AC                                    
	    LDX z80_AP       ; restore C                
        STA z80_AP
        STX z80_A
	    BEQ NOSIG                                   
	    LDA z80_E									
	    LDX z80_L
	    STA z80_L
	    STX z80_E
	    LDA z80_D
	    LDX z80_H
	    STA z80_H
	    STX z80_D
NOSIG	
        SEC                            
        LDA z80_L
        SBC z80_E
        STA z80_L
        LDA z80_H
        SBC z80_D
        STA z80_H
	    BPL SET_STP                                                 
	    LDA z80_A                                                   
        EOR #$FF                                                    
        LDX z80_AP                                                  
        STA z80_AP
        TXA
	    EOR #$FF                                                    
        CLC             
        ADC #01                                                
        TAX                                                         
        LDA z80_AP
        STX z80_AP
        STA z80_A
SET_STP	
        LDY #(TSlStp+1)                                             
        LDA z80_A
        STA (z80_IX),Y                                              
        TAX                                                         
        LDA z80_AP
        STX z80_AP
        STA z80_A
	    DEY                       
        STA (z80_IX),y
        LDY #COnOff                                                 
        LDA #00
        STA (z80_IX),Y
	    RTS                                                         
C_GLISS	
        LDY #Flags       											
	    LDA (z80_IX),Y
	    ORA #%00000100
	    STA (z80_IX),Y
	    LDY #00                                                     
        LDA (z80_C),y
        STA z80_A
        INC z80_C                                                   
        BNE +
        INC z80_B
+       LDY #TnSlDl                                                 
        STA (z80_IX),Y
	    CLC                                                         
        LDA z80_A                                                   
	    BNE GL36                                                    
	    LDA Version+1                                               
	    CMP #7                                                      
	    BCS +                                                      
        LDA #00         ; si A < 7  , A = 0 ($FF+1)                 
        BEQ ++
+       LDA #01         ; si A >= 7 , A = 1 ($00+1)
++	    
GL36	
        LDY #TSlCnt                                                 
	    STA (z80_IX),Y                                              
        LDY #00                                                     
        LDA (z80_C),Y
        STA z80_AP
        INY
        LDA (z80_C),y
        STA z80_A
        CLC
        LDA z80_C
        ADC #02
        STA z80_C                                                   
        BCC +
        INC z80_B
+       JMP SET_STP                                                 
C_SMPOS	
        LDY #00                                                    
        LDA (z80_C),y
        INC z80_C                                                   
        BNE +
        INC z80_B
+       LDY #PsInSm                                                 
        STA (z80_IX),Y
	    RTS                                                         
C_ORPOS	
        LDY #00                                                             
        LDA (z80_C),y
        INC z80_C                                                   
        BNE +
        INC z80_B
+       LDY #PsInOr                                                 
        STA (z80_IX),Y
	    RTS                                                         
C_VIBRT	
        LDY #00                                                          
        LDA (z80_C),y
        INC z80_C                                                   
        BNE +
        INC z80_B
+       LDY #OnOffD                                                 
        STA (z80_IX),Y
        LDY #COnOff                                                 
        STA (z80_IX),Y
	    LDY #00                                                     
        LDA (z80_C),y
        INC z80_C                                                   
        BNE +
        INC z80_B
+       LDY #OffOnD                                                 
        STA (z80_IX),Y
        LDA #00                                                     
        LDY #TSlCnt                                                 
        STA (z80_IX),Y
	    LDY #CrTnSl                                                 
        STA (z80_IX),Y
	    INY                                                         
        STA (z80_IX),Y
	    RTS 
C_ENGLS	
        LDY #00                                                     
        LDA (z80_C),y
        LDY #Env_Del
        STA (z80_IY),Y
        LDY #CurEDel
        STA (z80_IY),Y        
        LDY #01
        LDA (z80_C),Y
        STA z80_L
        INY
        LDA (z80_C),Y
        STA z80_H
        LDY #(ESldAdd+1)
        STA (z80_IY),Y
        DEY
        LDA z80_L
        STA (z80_IY),Y
        CLC
        LDA z80_C 
        ADC #03
        STA z80_C
        BCC +
        INC z80_B
+       RTS        
C_DELAY	
        LDY #00                                     
        LDA (z80_C),y                               
        STA z80_A       ; save A
        LDY #Delay
        STA (z80_IY),Y                              
        INC z80_C                                   
        BNE +
        INC z80_B
+       LDA V2ModNum                                
        BIT BITTABLE+1                              
	    BNE +                                       
        RTS
+       LDA z80_A       ; restore A
	    STA V1Delay                                 
	    STA V1DelyCnt                               
	    STA V2Delay                                 
	    RTS                                         
SETENV	
        LDY #Env_En                                 
        LDA z80_E
        STA (z80_IX),Y
        LDA z80_A
        LDY #(AYREGS+EnvTp)                         
        STA (z80_IY),Y
	    LDY #00                                     
        LDA (z80_C),y           
	    STA z80_H                                                         
	    INY                                         
        LDA (z80_C),y
	    STA z80_L                                   
        LDY #EnvBase                                
        ; LDA z80_L
        STA (z80_IY),Y
	    INY                                         
        LDA z80_H
        STA (z80_IY),Y
        LDA z80_C
        CLC
        ADC #02
        STA z80_C
        BCC +
        INC z80_B                                                 
+	    LDA #00                                                     
	    LDY #PsInOr                                                 
        STA (z80_IX),Y
        LDY #CurEDel
        STA (z80_IY),Y
        STA z80_L
        STA z80_H
        JMP SETESLD                                 
SETORN	
        LDA z80_A
        ASL                                         
	    STA z80_E                                   
	    LDA #00                                     
        STA z80_D
	    LDY #PsInOr                                 
        STA (z80_IX),Y
	    CLC
        LDY #OrnPtrs                                
        LDA (z80_IY),Y
        ADC z80_E
        STA z80_L
	    INY                                         
        LDA (z80_IY),Y
        ADC #00         ; D = 0
        STA z80_H
        LDY #00                                     
        LDA (z80_L),Y
        STA z80_E
        INY                                         
        LDA (z80_L),Y                               
        STA z80_D
        CLC
        LDY #MODADDR                                
        LDA (z80_IY),Y
        ADC z80_E
        STA z80_L
	    INY                                         
        LDA (z80_IY),Y
        ADC z80_D
        STA z80_H
        LDY #OrnPtr                                 
        LDA z80_L
        STA (z80_IX),Y
        INY                                         
        LDA z80_H
        STA (z80_IX),Y
C_NOP	
        RTS                                         
; -------------------------------------
;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODULES
SPCCOMS 
        !word C_NOP-1
	    !word C_GLISS-1
	    !word C_PORTM-1
	    !word C_SMPOS-1
	    !word C_ORPOS-1
	    !word C_VIBRT-1
	    !word C_NOP-1
	    !word C_NOP-1
	    !word C_ENGLS-1
	    !word C_DELAY-1
	    !word C_NOP-1
	    !word C_NOP-1
	    !word C_NOP-1
	    !word C_NOP-1
	    !word C_NOP-1
	    !word C_NOP-1
; -------------------------------------
CHREGS	
        JSR GETIX                                   
        LDA #00                                                  
	    STA z80_A       ; save
        STA Ampl+1                                                 
	    LDA z80_L                                            
        STA val2                                                 
        LDA z80_H
        STA val2+1
        LDY #Flags                                               
        LDA (z80_IX),y
        BIT BITTABLE+0
	    BNE +
        JMP CH_EXIT                                              
+    	LDY #OrnPtr                                              
        LDA (z80_IX),Y
        STA z80_L
        STA val1            ; save L
        INY                                                      
        LDA (z80_IX),Y
        STA z80_H
        STA val1+1          ; save H	                                                             
        LDY #00
        LDA (z80_L),Y                                            
        STA z80_E
        INY
        LDA (z80_L),Y
        STA z80_D
	    LDY #PsInOr                                              
        LDA (z80_IX),Y
	    STA z80_L                                                
        STA z80_A                                        
	    CLC
        LDA val1
        ADC z80_L
        STA z80_L
        LDA val1+1
        ADC #00                
        STA z80_H                                               
        LDA z80_L
        ADC #02
        STA z80_L
        LDA z80_H
        ADC #00
        STA z80_H
        LDA z80_A                                                
        ADC #01
        CMP z80_D                                                
	    BCC CH_ORPS                                              
	    CLC
        LDA z80_E                                                
CH_ORPS	
        LDY #PsInOr                                              
        STA (z80_IX),Y
	    LDY #Note                                                
        LDA (z80_IX),Y
	    LDY #00                                                  
        ADC (z80_L),Y       ; ADC ($AC,X)	
	    BPL CH_NTP                                               
	    LDA #00                                                  
CH_NTP	
        CMP #96                                                  
	    BCC CH_NOK                                               
	    LDA #95                                                  
CH_NOK	
        ASL                                                      
        STA z80_AP                                               
	    LDY #SamPtr                                              
        LDA (z80_IX),Y
        STA z80_L
	    STA val1            ; save L
        INY                                                      
        LDA (z80_IX),Y
        STA z80_H
        STA val1+1          ; save H
	    LDY #00
        LDA (z80_L),Y                                            
        STA z80_E   
        INY
        LDA (z80_L),Y
        STA z80_D   
	    LDY #PsInSm                                              
        LDA (z80_IX),Y
	    STA z80_B                                                
	    ASL                                                      
	    ASL                                                      
	    STA z80_L                                                                                           
        CLC
        ADC val1
        STA z80_L
        LDA val1+1
        ADC #00
        STA z80_H                                                     
        LDA z80_L
        ADC #02
        STA z80_L
        LDA z80_H
        ADC #00
        STA z80_H
	    LDA z80_B                                                                                                      
        ADC #01
	    CMP z80_D                                                
	    BCC CH_SMPS                                              
	    LDA z80_E                                                
CH_SMPS	
        LDY #PsInSm                                              
        STA (z80_IX),Y
        LDY #00
        LDA (z80_L),Y                                            
        STA z80_C
        INY
        LDA (z80_L),Y
        STA z80_B
        LDY #TnAcc                                               
        LDA (z80_IX),Y
        STA z80_E
        INY
        LDA (z80_IX),Y
	    STA z80_D                                                
	    CLC                                                      
        LDY #02
        LDA (z80_L),Y                                            
        ADC z80_E
        TAX
        INY
        LDA (z80_L),Y
        ADC z80_D
        STA z80_H
        STA z80_D
        TXA
        STA z80_L
        STA z80_E
        LDA #%01000000                                           
        BIT z80_B
	    BEQ CH_NOAC                                              
	    LDY #TnAcc                                               
        LDA z80_L
        STA (z80_IX),Y
	    INY                                                      
        LDA z80_H
        STA (z80_IX),Y
CH_NOAC 												             
        LDA z80_AP                                               
        STA z80_A                                                
        STA z80_L                                                
        CLC
        LDA #<NT_
        ADC z80_L
        STA z80_L
        LDA #>NT_
        ADC #00
        STA z80_H
        LDY #00
        LDA (z80_L),Y                                            
        ADC z80_E
        TAX
        INY
        LDA (z80_L),Y
        ADC z80_D                                               
        STA z80_H
        TXA
        STA z80_L
        CLC
	    LDY #CrTnSl                                              
        LDA (z80_IX),Y
        STA z80_E
        ADC z80_L
        STA z80_L
	    STA val2
        INY                                                      
        LDA (z80_IX),Y
        STA z80_D
        ADC z80_H
        STA z80_H
        STA val2+1
CSP_	
        LDA #00                                                  
	    LDY #TSlCnt                                              
        ORA (z80_IX),Y
	    STA z80_A
        BNE +                                                
        JMP CH_AMP
+   	LDA (z80_IX),Y                                           
        SEC
        SBC #01
        STA (z80_IX),Y
	    BNE CH_AMP                                               
	    LDY #TnSlDl                                              
        LDA (z80_IX),Y
        LDY #TSlCnt                                              
        STA (z80_IX),Y
	    CLC
        LDY #TSlStp                                              
        LDA (z80_IX),Y
        ADC z80_E
        STA z80_L
	    INY                                                      
        LDA (z80_IX),Y
        ADC z80_D
        STA z80_H 
	    STA z80_A       ; save                                   
	    LDY #CrTnSl+1                                              
        STA (z80_IX),Y
        DEY                                                
        LDA z80_L
        STA (z80_IX),Y
        LDY #Flags
        LDA (z80_IX),Y
        BIT BITTABLE+2
	    BNE CH_AMP  	                                         
	    LDY #TnDelt                                              
        LDA (z80_IX),Y
        STA z80_E
	    INY                                                      
        LDA (z80_IX),Y
        STA z80_D
	    LDA z80_A                                                
	    BEQ CH_STPP                                              
	    LDA z80_E												
		LDX z80_L
		STA z80_L
		STX z80_E
		LDA z80_D
		LDX z80_H
		STA z80_H
		STX z80_D
CH_STPP
        SEC             ; carry = 0 becoze And A                   
        LDA z80_L
        SBC z80_E
        STA z80_L
        LDA z80_H
        SBC z80_D
        STA z80_H
        BMI CH_AMP                                               
	    LDY #SlToNt                                              
        LDA (z80_IX),Y
	    LDY #Note                                                
        STA (z80_IX),Y
	    LDA #00                                                  
	    LDY #TSlCnt                                              
        STA (z80_IX),Y
	    LDY #CrTnSl                                              
        STA (z80_IX),Y
        INY                                                      
        STA (z80_IX),Y
CH_AMP	
        LDY #CrAmSl                                              
        LDA (z80_IX),Y
	    STA z80_A       ; save
        LDA #%10000000                                           
        BIT z80_C
	    BEQ CH_NOAM                                              
	    LDA #%01000000                                           
        BIT z80_C
	    BEQ CH_AMIN                                              
	    LDA z80_A                                                
        CMP #15
	    BEQ CH_NOAM                                              
	    CLC                                                      
        ADC #01
	    JMP CH_SVAM                                              
CH_AMIN	
        LDA z80_A                                                
        CMP #$F1        ; -15
	    BEQ CH_NOAM                                              
	    SEC                                                      
        SBC #01
CH_SVAM	
        LDY #CrAmSl                                              
        STA (z80_IX),Y
        STA z80_A
CH_NOAM	
        LDA z80_A
        STA z80_L                                                
	    LDA z80_B                                                
	    AND #15                                                  
	    CLC                                                      
        ADC z80_L
	    BPL CH_APOS                                              
	    LDA #00                                                  
CH_APOS	
        CMP #16                                                  
	    BCC CH_VOL                                               
	    LDA #15 
CH_VOL	
        LDY #Volume                                              
        ORA (z80_IX),Y
	    STA z80_L
        CLC                                                
	    LDA #<VT_                                                
        ADC z80_L
        STA z80_L
        LDA #>VT_
        ADC #00
        STA z80_H
	    LDY #00                                                  
        LDA (z80_L),Y       
        STA z80_A       ; save
CH_ENV	
        LDA #%00000001                                           
        BIT z80_C
	    BNE CH_NOEN                                              
	    LDY #Env_En                                              
        LDA z80_A
        ORA (z80_IX),Y
        STA z80_A
CH_NOEN	
        LDA z80_A
        STA Ampl+1                                                 
        LDA z80_C                                                
        STA z80_A
        LDA #%10000000                                           
        BIT z80_B
	    BEQ NO_ENSL                                              
        LDA z80_A
        ROL                                                      
	    ROL                                                      
	    CMP #$80                                                 
        ROR
	    CMP #$80                                                 
        ROR
	    CMP #$80                                                 
        ROR
	    LDY #CrEnSl                                              
        CLC
        ADC (z80_IX),Y
        STA z80_A
        LDA #%00100000                                           
        BIT z80_B
	    BEQ NO_ENAC                                              
	    LDY #CrEnSl                                              
        LDA z80_A
        STA (z80_IX),Y
NO_ENAC	
        LDY #AddToEn                                
        CLC
        ADC (z80_IY),Y
	    STA (z80_IY),Y                              
	    JMP CH_MIX                                  
NO_ENSL 
        LDA z80_A
        ROR                                         
	    LDY #CrNsSl                                 
        CLC
        ADC (z80_IX),Y
	    LDY #AddToNs                                
        STA (z80_IY),Y
        STA z80_A       ; save
	    LDA #%00100000                              
        BIT z80_B
	    BEQ CH_MIX                                  
	    LDY #CrNsSl                                 
        LDA z80_A
        STA (z80_IX),Y
CH_MIX	
        LDA z80_B                                   
	    ROR                                         
	    AND #$48                                    
        STA z80_A
CH_EXIT	
        LDA z80_A
        LDY #(AYREGS+Mixer)                         
        ORA (z80_IY),Y
	    LSR                                                        
        BCC +
        ORA #$80
+	    STA (z80_IY),Y                              
        LDA val2+1                                               
        STA z80_H
        LDA val2 
        STA z80_L
	    LDA #00                                                  
	    LDY #COnOff                                              
        ORA (z80_IX),Y
	    STA z80_A       ; save
        BNE +                                                  
        RTS
+    	LDY #COnOff                                              
        LDA (z80_IX),Y
        SEC
        SBC #01
        STA (z80_IX),Y
	    BEQ +                                                  
        RTS
+    	LDY #Flags                                               
        LDA z80_A
        EOR (z80_IX),Y                                           
        STA (z80_IX),Y                                           
	    ROR                                                      
	    LDY #OnOffD                                              
        LDA (z80_IX),Y
	    BCS CH_ONDL                                              
	    LDY #OffOnD                                              
        LDA (z80_IX),Y
CH_ONDL	
        LDY #COnOff                                              
        STA (z80_IX),Y
        RTS                                                         
; ==============================================================================================
PLAY_	
        LDA #00                                     
        LDY #AddToEn                                
        STA (z80_IY),Y
	    LDY #(AYREGS+Mixer)                         
        STA (z80_IY),Y
	    LDA #$FF                                    
	    LDY #(AYREGS+EnvTp)                         
        STA (z80_IY),Y
	    LDY #DelyCnt                                
        SEC
        LDA (z80_IY),Y
        SBC #01
        STA (z80_IY),Y
        BEQ +                                       
        JMP PL2
+	    LDY #(ChanA+NtSkCn)                         
        SEC
        LDA (z80_IY),Y
        SBC #01
        STA (z80_IY),Y
	    BEQ +                                       
        JMP PL1B
+	    LDY #AdInPtA                                
        LDA (z80_IY),Y
        STA z80_C
	    INY                                         
        LDA (z80_IY),Y
        STA z80_B
	    LDY #00                                     
        LDA (z80_C),Y
	    BEQ +                                       
        JMP PL1A                                    
+       STA z80_D                                   
	    LDY #Ns_Base                                
        STA (z80_IY),Y
	    LDY #CrPsPtr                                
        LDA (z80_IY),Y
        STA z80_L
	    INY                                         
        LDA (z80_IY),Y
        STA z80_H
        INC z80_L                                  
        BNE +
        INC z80_H
+       LDY #00                                   
        LDA (z80_L),Y
	    CMP #$FF                                   
        STA z80_A
	    BNE PLNLP                                  
	    JSR CHECKLP                                
	    LDY #LPosPtr                               
        LDA (z80_IY),Y
        STA z80_L
	    INY                                        
        LDA (z80_IY),Y
        STA z80_H
        LDY #00                                    
        LDA (z80_L),Y                              
        STA z80_A       ; save
PLNLP	
        JSR SETCPPT                                
        LDY #ModNum                                
        LDA (z80_IY),Y
        BIT BITTABLE+1
	    BEQ NoAlCo                                 
        LDA z80_A
        SEC
TSSub
	    SBC #$D6                                   
	    EOR #$FF                                    
        STA z80_A
NoAlCo
	    LDA z80_A       ; restore
        ASL                                         
	    STA z80_E                                   
	    ROL z80_D                                   
	    LDA z80_L                                   
	    LDY #PosSub                                 
        SEC
        SBC (z80_IY),Y
        LDY #CurPos
	    STA (z80_IY),Y                              
        CLC
	    LDY #PatsPtr                                
        LDA (z80_IY),Y
	    ADC z80_E
        STA z80_L
        INY                                         
        LDA (z80_IY),Y
        ADC z80_D
        STA z80_H
        LDY #MODADDR                                
        LDA (z80_IY),Y
        STA z80_E
	    INY                                         
        LDA (z80_IY),Y
        STA z80_D
        LDY #00                 
        LDA (z80_L),Y                               
        CLC
        ADC z80_E
        STA z80_C
        INY
        LDA (z80_L),Y
        ADC z80_D
        STA z80_B
        INY 
        LDA (z80_L),Y                               
        CLC
        ADC z80_E
        STA val1
        INY
        LDA (z80_L),Y
        ADC z80_D
        STA val1+1
        LDY #AdInPtB                                
        LDA val1
        STA (z80_IY),Y
        INY
        LDA val1+1
        STA (z80_IY),Y                              
	    LDY #4                                      
        LDA (z80_L),Y                               
        CLC
        ADC z80_E
        STA val1
        INY
        LDA (z80_L),Y
        ADC z80_D
        STA val1+1
	    LDY #AdInPtC                                
        LDA val1
        STA (z80_IY),Y
	    INY                                         
        LDA val1+1
        STA (z80_IY),Y
        ;STA z80_L/STA z80_H ?
;PSP_	
PL1A	
        LDA #<ChanA                                 
        STA z80_E
        LDA #>ChanA
        STA z80_D
	    JSR PTDECOD                                 
        LDY #AdInPtA                                
        LDA z80_C
        STA (z80_IY),Y
        INY
        LDA z80_B
	    STA (z80_IY),Y                              
PL1B	
        LDY #(ChanB+NtSkCn)                         
        LDA (z80_IY),Y
        SEC
        SBC #01
        STA (z80_IY),Y
	    BNE PL1C                                   
	    LDA #<ChanB                                
        STA z80_E
        LDA #>ChanB
        STA z80_D
	    LDY #AdInPtB                               
        LDA (z80_IY),Y
        STA z80_C
        INY
	    LDA (z80_IY),Y   
	    STA z80_B
        JSR PTDECOD                                
        LDY #AdInPtB                               
        LDA z80_C
        STA (z80_IY),Y
        INY
        LDA z80_B
	    STA (z80_IY),Y
PL1C	
        LDY #(ChanC+NtSkCn)                        
        LDA (z80_IY),Y
        SEC
        SBC #01
        STA (z80_IY),Y
	    BNE PL1D                                   
	    LDA #<ChanC                                
        STA z80_E
        LDA #>ChanC
        STA z80_D
	    LDY #AdInPtC                               
        LDA (z80_IY),Y
        STA z80_C
        INY
	    LDA (z80_IY),Y   
	    STA z80_B
        JSR PTDECOD                                
        LDY #AdInPtC                               
        LDA z80_C
        STA (z80_IY),Y
        INY
        LDA z80_B
	    STA (z80_IY),Y
PL1D	
        LDY #Delay                                 
        LDA (z80_IY),Y
        LDY #DelyCnt                               
        STA (z80_IY),Y
PL2	
        LDA #<ChanA                                
        STA z80_E
        LDA #>ChanA
        STA z80_D
	    LDY #(AYREGS+TonA)                         
        LDA (z80_IY),Y
        STA z80_L
	    INY                                        
        LDA (z80_IY),Y
        STA z80_H
	    JSR CHREGS                                 
	    LDY #(AYREGS+TonA)                         
        LDA z80_L
        STA (z80_IY),Y
        INY                                        
        LDA z80_H
        STA (z80_IY),Y
Ampl
	    LDA #$AC                                   
	    LDY #(AYREGS+AmplA)                        
        STA (z80_IY),Y
        LDA #<ChanB                                
        STA z80_E
        LDA #>ChanB
        STA z80_D
	    LDY #(AYREGS+TonB)                         
        LDA (z80_IY),Y
        STA z80_L
	    INY                                        
        LDA (z80_IY),Y
        STA z80_H
	    JSR CHREGS                                 
	    LDY #(AYREGS+TonB)                         
        LDA z80_L
        STA (z80_IY),Y
        INY                                        
        LDA z80_H
        STA (z80_IY),Y
        LDA Ampl+1                                 
	    LDY #(AYREGS+AmplB)                        
        STA (z80_IY),Y
        LDA #<ChanC                                
        STA z80_E
        LDA #>ChanC
        STA z80_D
	    LDY #(AYREGS+TonC)                         
        LDA (z80_IY),Y
        STA z80_L
	    INY                                        
        LDA (z80_IY),Y
        STA z80_H
	    JSR CHREGS                                 
	    LDY #(AYREGS+TonC)                         
        LDA z80_L
        STA (z80_IY),Y
        INY                                        
        LDA z80_H
        STA (z80_IY),Y
        LDA Ampl+1                                 
	    LDY #(AYREGS+AmplC)                        
        STA (z80_IY),Y

	    LDY #Ns_Base                               
        LDA (z80_IY),Y
        CLC
	    LDY #AddToNs                               
        ADC (z80_IY),Y
	    LDY #Noise                                 
        STA (z80_IY),Y
	    LDY #AddToEn                               
	    LDA (z80_IY),Y                             
        STA z80_E
        ASL                                                      
	    BCC +                                                
        LDA #$FF
        BNE ++          ; always
+       LDA #00
++   	STA z80_D      
	    CLC
        LDY #EnvBase                                
        LDA (z80_IY),Y
        ADC z80_E
        STA z80_L
	    INY                                         
        LDA (z80_IY),Y
        ADC z80_D
        STA z80_H
        CLC	    
        LDY #CurESld                                
        LDA (z80_IY),Y
        STA z80_E
	    ADC z80_L
        STA z80_L
        INY                                         
        LDA (z80_IY),Y
        STA z80_D
        ADC z80_H
        STA z80_H
        LDY #(AYREGS+Env)                           
        LDA z80_L
        STA (z80_IY),Y
	    INY                                         
        LDA z80_H
        STA (z80_IY),Y
	    LDA #00                                     
	    LDY #CurEDel                                
        ORA (z80_IY),Y
	    BNE +                                       
        RTS
+       LDA (z80_IY),Y                              
        SEC
        SBC #01
        STA (z80_IY),Y
	    BEQ +                                       
        RTS
+       LDY #Env_Del                                
        LDA (z80_IY),Y
	    LDY #CurEDel                                
        STA (z80_IY),Y
	    CLC
        LDY #ESldAdd                                
        LDA (z80_IY),Y
        ADC z80_E
        STA z80_L
        INY                                         
        LDA (z80_IY),Y
        ADC z80_D
        STA z80_H
	    JMP SETESLD                                 
; ==============================================================================================
PLAY    
        LDA #<VARS1                                 
        STA z80_IY
        LDA #>VARS1
        STA z80_IY+1
	    JSR PLAY_                                   
	    LDA is_ts                                   
	    BEQ PL_nts                                  
	    LDA #<VARS2                                 
        STA z80_IY
        LDA #>VARS2
        STA z80_IY+1
        JSR PLAY_                                   
PL_nts
; ==============================================================================================
ROUT
        JMP ROUT1

; ==============================================================================================
ROUT1	  ; use 2 AY-3-8910 (1 MOCKINGBOARD SLOT#4) 
;         ; MOD1 (channels ABC) -> LEFT | MOD2 (channels ABC) -> RIGHT

        ; Fix Env
        LDX V1AYREGS+12   ; hi Env
        LDA V1AYREGS+11   ; lo Env
        JSR FIX16BITS
        STA V1AYREGS+11
        STX V1AYREGS+12
        LDX V2AYREGS+12   ; hi Env
        LDA V2AYREGS+11   ; lo Env
        JSR FIX16BITS
        STA V2AYREGS+11
        STX V2AYREGS+12
        ; --------
        ; Fix Noise
        LSR V1AYREGS+6
        LSR V2AYREGS+6
        ; --------
    
        LDY #04    
		  LDX #00
    
        ; AY1
-       STX $CF01   		; Reg -> ORA1 (data) 
        LDA #$07			; Set fct "Set PSG Reg #"
		  STA $CF00   		; ORB1 (fct)
		  STY $CF00   		; inactive -> ORB1 (fct)
		  LDA V1AYREGS,X
		  STA $CF01   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		  STA $CF00   		; ORB1 (fct)
		  STY $CF00   		; inactive -> ORB1 (fct)
        ; AY2
		  STX $CF81   		; Reg -> ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		  STA $CF80   		; ORB1 (fct)
        STY $CF80   		; Set fct "Inactive"
		  LDA V2AYREGS,X
		  STA $CF81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		  STA $CF80   		; ORB1 (fct)
		  STY $CF80     	; inactive -> ORB1 (fct)
		  INX
        CPX #13
        BNE -
        
        ; REGISTER 13 case!
        LDA V1AYREGS+13
        BMI +
        ; AY1-13
		  STX $CF01   		; Reg -> ORA1 (data) 
        LDY #$07			; Set fct "Set PSG Reg #"
		  STY $CF00   		; ORB1 (fct)
		  LDY #$04			; Set fct "Inactive"
		  STY $CF00   		; ORB1 (fct)
		  STA $CF01   		; ORA1 (data)
        LDY #$06			; Set fct "Write DATA"
		  STY $CF00   		; ORB1 (fct)
        LDY #$04			; Set fct "Inactive"
		  STY $CF00   		; ORB1 (fct)

+       LDA V2AYREGS+13
        BMI +      
        ; AY2-13
		  STX $CF81   		; Reg -> ORA1 (data)
        LDY #$07			; Set fct "Set PSG Reg #"
		  STY $CF80   		; ORB1 (fct)
		  LDY #$04			; Set fct "Inactive"
        STY $CF80   		; Set fct "Inactive"
		  STA $CF81   		; ORA1 (data)
        LDY #$06			; Set fct "Write DATA"
		  STY $CF80   		; ORB1 (fct)
        LDY #$04			; Set fct "Inactive"
		  STY $CF80     		; ORB1 (fct)

+	      RTS
; ==============================================================================================	
ROUT2	; use 4 AY-3-8910 (2 MOCKINGBOARD SLOT#4/SLOT#5)
        ; channels A -> LEFT | channels B -> LEFT+RIGHT | channels C -> RIGHT

        ; Fix Env
        LDX V1AYREGS+12   ; hi Env
        LDA V1AYREGS+11   ; lo Env
        JSR FIX16BITS
        STA V1AYREGS+11
        STX V1AYREGS+12
        LDX V2AYREGS+12   ; hi Env
        LDA V2AYREGS+11   ; lo Env
        JSR FIX16BITS
        STA V2AYREGS+11
        STX V2AYREGS+12
        ; --------
        ; Fix Noise
        LSR V1AYREGS+6
        LSR V2AYREGS+6
        ; --------
    
        LDY #04    
		LDX #00
    
        ; REGISTERS 0-7
        ; AY1/AY2
-       STX $CF01   		; reg->ORA1 (data)
		STX $CF81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
		STA $CF80   		; Set fct "Set PSG Reg #"
        STY $CF80   		; Set fct "Inactive"

		LDA V1AYREGS,X
		STA $CF01   		; ORA1 (data)
		STA $CF81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
        STA $CF80   		; Set fct "Write DATA"
        STY $CF80   		; Set fct "Inactive"

        ; AY3/AY4
        STX $CE01   		; reg->ORA1 (data)
		STX $CE81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
		STA $CE80   		; Set fct "Set PSG Reg #"
        STY $CE80   		; Set fct "Inactive"

		LDA V2AYREGS,X
		STA $CE01   		; ORA1 (data)
		STA $CE81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
        STA $CE80   		; Set fct "Write DATA"
        STY $CE80   		; Set fct "Inactive"

		INX
        CPX #08
        BNE -
        
        ; REGISTER 8
        ; AY1/AY2
        STX $CF01   		; reg->ORA1 (data)
		STX $CF81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
		STA $CF80   		; Set fct "Set PSG Reg #"
        STY $CF80   		; Set fct "Inactive"

		LDA V1AYREGS,X      ; Left => A1
		STA $CF01   		; ORA1 (data)
        LDA #00             ; Right => vol = 0 
		STA $CF81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
        STA $CF80   		; Set fct "Write DATA"
        STY $CF80   		; Set fct "Inactive"

        ; AY3/AY4
        STX $CE01   		; reg->ORA1 (data)
		STX $CE81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
		STA $CE80   		; Set fct "Set PSG Reg #"
        STY $CE80   		; Set fct "Inactive"

		LDA V2AYREGS,X      ; Left => A2
		STA $CE01   		; ORA1 (data)
        LDA #00             ; Right => vol = 0
		STA $CE81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
        STA $CE80   		; Set fct "Write DATA"
        STY $CE80   		; Set fct "Inactive"
        
        ; REGISTER 9
        INX
        ; AY1/AY2
        STX $CF01   		; reg->ORA1 (data)
		STX $CF81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
		STA $CF80   		; Set fct "Set PSG Reg #"
        STY $CF80   		; Set fct "Inactive"

		LDA V1AYREGS,X      ; Left + Right => B1
		STA $CF01   		; ORA1 (data)
		STA $CF81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
        STA $CF80   		; Set fct "Write DATA"
        STY $CF80   		; Set fct "Inactive"

        ; AY3/AY4
        STX $CE01   		; reg->ORA1 (data)
		STX $CE81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
		STA $CE80   		; Set fct "Set PSG Reg #"
        STY $CE80   		; Set fct "Inactive"

		LDA V2AYREGS,X      ; Left + Right => B2
		STA $CE01   		; ORA1 (data)
		STA $CE81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
        STA $CE80   		; Set fct "Write DATA"
        STY $CE80   		; Set fct "Inactive"

        ; REGISTER 10
        INX
        ; AY1/AY2
        STX $CF01   		; reg->ORA1 (data)
		STX $CF81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
		STA $CF80   		; Set fct "Set PSG Reg #"
        STY $CF80   		; Set fct "Inactive"

		LDA #00             ; Left => vol = 0 
		STA $CF01   		; ORA1 (data)
        LDA V1AYREGS,X      ; Right => C1
		STA $CF81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
        STA $CF80   		; Set fct "Write DATA"
        STY $CF80   		; Set fct "Inactive"

        ; AY3/AY4
        STX $CE01   		; reg->ORA1 (data)
		STX $CE81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
		STA $CE80   		; Set fct "Set PSG Reg #"
        STY $CE80   		; Set fct "Inactive"

		LDA #00             ; Left => vol = 0
        STA $CE01   		; ORA1 (data)
        LDA V2AYREGS,X      ; Right => C2
		STA $CE81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
        STA $CE80   		; Set fct "Write DATA"
        STY $CE80   		; Set fct "Inactive"
        
        ; REGISTERS 11-12
        INX
        ; AY1/AY2
-       STX $CF01   		; reg->ORA1 (data)
		STX $CF81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
		STA $CF80   		; Set fct "Set PSG Reg #"
        STY $CF80   		; Set fct "Inactive"

		LDA V1AYREGS,X
		STA $CF01   		; ORA1 (data)
		STA $CF81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CF00   		; ORB1 (fct)
		STY $CF00   		; fct inactive->ORB1 (fct)
        STA $CF80   		; Set fct "Write DATA"
        STY $CF80   		; Set fct "Inactive"

        ; AY3/AY4
        STX $CE01   		; reg->ORA1 (data)
		STX $CE81   		; reg->ORA1 (data)
        LDA #$07			; Set fct "Set PSG Reg #"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
		STA $CE80   		; Set fct "Set PSG Reg #"
        STY $CE80   		; Set fct "Inactive"

		LDA V2AYREGS,X
		STA $CE01   		; ORA1 (data)
		STA $CE81   		; ORA1 (data)
        LDA #$06			; Set fct "Write DATA"
		STA $CE00   		; ORB1 (fct)
		STY $CE00   		; fct inactive->ORB1 (fct)
        STA $CE80   		; Set fct "Write DATA"
        STY $CE80   		; Set fct "Inactive"

		INX
        CPX #13
        BNE -

        ; REGISTER 13 case!
        LDA V1AYREGS+13
        BMI +
        ; AY1/AY2
		STX $CF01   		; reg->ORA1 (data)
		STX $CF81   		; reg->ORA1 (data)
        LDY #$07			; Set fct "Set PSG Reg #"
		STY $CF00   		; ORB1 (fct)
		LDY #$04			; Set fct "Inactive"
        STY $CF00   		; Set fct "Inactive"
        LDY #$07			; Set fct "Write DATA"
		STY $CF80   		; ORB1 (fct)
        LDY #$04			; Set fct "Inactive"
		STY $CF80     		; ORB1 (fct)

		STA $CF01   		; ORA1 (data)
		STA $CF81   		; ORA1 (data)
        LDY #$06			; Set fct "Set PSG Reg #"
		STY $CF00   		; ORB1 (fct)
		LDY #$04			; Set fct "Inactive"
        STY $CF00   		; Set fct "Inactive"
        LDY #$06			; Set fct "Write DATA"
		STY $CF80   		; ORB1 (fct)
        LDY #$04			; Set fct "Inactive"
		STY $CF80     		; ORB1 (fct)

+       LDA V2AYREGS+13
        BMI +      
        ; AY3/AY4
		STX $CE01   		; reg->ORA1 (data)
		STX $CE81   		; reg->ORA1 (data)
        LDY #$07			; Set fct "Set PSG Reg #"
		STY $CE00   		; ORB1 (fct)
		LDY #$04			; Set fct "Inactive"
        STY $CE00   		; Set fct "Inactive"
        LDY #$07			; Set fct "Write DATA"
		STY $CE80   		; ORB1 (fct)
        LDY #$04			; Set fct "Inactive"
		STY $CE80     		; ORB1 (fct)

		STA $CE01   		; ORA1 (data)
		STA $CE81   		; ORA1 (data)
        LDX #$06			; Set fct "Set PSG Reg #"
		STX $CE00   		; ORB1 (fct)
        STY $CE00   		; Set fct "Inactive"
		STX $CE80   		; ORB1 (fct)
		STY $CE80     		; ORB1 (fct)

+	    RTS
; ==============================================================================================
FIX16BITS       ; INT(256*2*1000/1773) = 289 = 256 + 32 + 1
                ; IN:  register A is low byte
                ;      register X is high byte
                ; OUT: register A is low byte
                ;      register X is high byte

        ; x256
        STX TA1
        STA TB1
        STX TB2
        STA TC2
        STX TB3
        STA TC3
        LDA #00
        STA TA2
        
        ; x32
        ASL TC2
        ROL TB2
        ROL TA2
        ASL TC2
        ROL TB2
        ROL TA2
        ASL TC2
        ROL TB2
        ROL TA2
        ASL TC2
        ROL TB2
        ROL TA2
        ASL TC2
        ROL TB2
        ROL TA2
        
        ; x32 + x01
        CLC
        LDA TC3
        ADC TC2
        ; STA TC2
        LDA TB3
        ADC TB2
        STA TB2
        LDA TA2
        ADC #00
        STA TA2

        ; + x256 
        CLC         
        LDA TB2
        ADC TB1
        TAY         ; STA TB1
        LDA TA2
        ADC TA1
        ; STA TA1

        ; / 2 (16bits)
        LSR         ; LSR TA1
        TAX         ; LDX TA1
        TYA         ; LDA TB1     
        ROR         ; ROR TB1
                    ; LDA TB1
        RTS
; ==============================================================================================
NT_DATA	
        !byte (T_NEW_0-T1_)*2
	    !byte TCNEW_0-T_
	    !byte (T_OLD_0-T1_)*2+1
	    !byte TCOLD_0-T_
	    !byte (T_NEW_1-T1_)*2+1
	    !byte TCNEW_1-T_
	    !byte (T_OLD_1-T1_)*2+1
	    !byte TCOLD_1-T_
	    !byte (T_NEW_2-T1_)*2
	    !byte TCNEW_2-T_
	    !byte (T_OLD_2-T1_)*2
	    !byte TCOLD_2-T_
	    !byte (T_NEW_3-T1_)*2
	    !byte TCNEW_3-T_
	    !byte (T_OLD_3-T1_)*2
	    !byte TCOLD_3-T_

T_

TCOLD_0	!byte $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$12+1,$14+1
	    !byte $18+1,$24+1,$3C+1,0
TCOLD_1	!byte $5C+1,0
TCOLD_2	!byte $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$82,$8C,$9C
	    !byte $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
TCNEW_3	!byte $56+1
TCOLD_3	!byte $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$32+1,$BE+1,0
TCNEW_0	!byte $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$30+1,$54+1
	    !byte $BC+1,$BE+1,0
TCNEW_1 = TCOLD_1
TCNEW_2	!byte $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$4C+1,$5E+1
	    !byte $BA+1,$BC+1,$BE+1,0
PT3EMPTYORN = *-1
	    !byte 1,0

; ChannelsVars STRUCTURES:
; STRUCT "REGS"
TonA	= 0
TonB	= 2
TonC	= 4
Noise	= 6
Mixer	= 7
AmplA	= 8
AmplB	= 9
AmplC	= 10
Env	    = 11
EnvTp	= 13
; end STRUCT "REGS"
REGS = EnvTp + 1        ; size

; STRUCT "CHP"
PsInOr	= 0
PsInSm	= 1
CrAmSl  = 2
CrNsSl	= 3
CrEnSl	= 4
TSlCnt	= 5
CrTnSl	= 6
TnAcc	= 8
COnOff	= 10
OnOffD	= 11
OffOnD	= 12
OrnPtr	= 13
SamPtr	= 15
NNtSkp	= 17
Note	= 18
SlToNt	= 19
Env_En	= 20
Flags	= 21
TnSlDl	= 22
TSlStp	= 23
TnDelt	= 25
NtSkCn	= 27
Volume	= 28
; end STRUCT "CHP"
CHP = Volume + 1        ; size

; STRUCT "VRS"
CurPos	= 0
PosSub	= 1
ModNum	= 2
ChanA	= 3
ChanB	= ChanA + CHP
ChanC	= ChanB + CHP
MODADDR	= ChanC + CHP
OrnPtrs	= MODADDR + 2
SamPtrs	= OrnPtrs + 2
PatsPtr	= SamPtrs + 2
AdInPtA	= PatsPtr + 2
AdInPtB	= AdInPtA + 2
AdInPtC	= AdInPtB + 2
CrPsPtr	= AdInPtC + 2
LPosPtr	= CrPsPtr + 2
Delay	= LPosPtr + 2
DelyCnt	= Delay + 1
ESldAdd	= DelyCnt + 1
CurESld	= ESldAdd + 2
Env_Del	= CurESld + 2
CurEDel	= Env_Del + 1
Ns_Base	= CurEDel + 1
AddToNs	= Ns_Base + 1
AddToEn	= AddToNs + 1
EnvBase	= AddToEn + 1
AYREGS	= EnvBase + 2
; end STRUCT "VRS"
VRS = AYREGS + REGS     ; size

; -------------------------------------
VARS
is_ts	    !byte 0
; -------------------------------------
VARS1
V1CurPos	!byte 0
V1PosSub	!byte 0
V1ModNum	!byte 0 ;bit0: ChipNum | bit1: 1-reversed patterns order (AlCo TS)
; CHANNEL A
V1ChanA	
V1APsInOr	!byte 0
V1APsInSm	!byte 0
V1ACrAmSl	!byte 0
V1ACrNsSl	!byte 0
V1ACrEnSl	!byte 0
V1ATSlCnt	!byte 0
V1ACrTnSl	!word 0
V1ATnAcc	!word 0
V1ACOnOff	!byte 0
V1AOnOffD	!byte 0
V1AOffOnD	!byte 0
V1AOrnPtr	!word 0
V1ASamPtr	!word 0
V1ANNtSkp	!byte 0
V1ANote	    !byte 0
V1ASlToNt	!byte 0
V1AEnv_En	!byte 0
V1AFlags	!byte 0
V1ATnSlDl	!byte 0
V1ATSlStp	!word 0
V1ATnDelt	!word 0
V1ANtSkCn	!byte 0
V1AVolume	!byte 0
; CHANNEL B
V1ChanB
V1BPsInOr	!byte 0
V1BPsInSm	!byte 0
V1BCrAmSl	!byte 0
V1BCrNsSl	!byte 0
V1BCrEnSl	!byte 0
V1BTSlCnt	!byte 0
V1BCrTnSl	!word 0
V1BTnAcc	!word 0
V1BCOnOff	!byte 0
V1BOnOffD	!byte 0
V1BOffOnD	!byte 0
V1BOrnPtr	!word 0
V1BSamPtr	!word 0
V1BNNtSkp	!byte 0
V1BNote	    !byte 0
V1BSlToNt	!byte 0
V1BEnv_En	!byte 0
V1BFlags	!byte 0
V1BTnSlDl	!byte 0
V1BTSlStp	!word 0
V1BTnDelt	!word 0
V1BNtSkCn	!byte 0
V1BVolume	!byte 0
; CHANNEL C
V1ChanC
V1CPsInOr	!byte 0
V1CPsInSm	!byte 0
V1CCrAmSl	!byte 0
V1CCrNsSl	!byte 0
V1CCrEnSl	!byte 0
V1CTSlCnt	!byte 0
V1CCrTnSl	!word 0
V1CTnAcc	!word 0
V1CCOnOff	!byte 0
V1COnOffD	!byte 0
V1COffOnD	!byte 0
V1COrnPtr	!word 0
V1CSamPtr	!word 0
V1CNNtSkp	!byte 0
V1CNote	    !byte 0
V1CSlToNt	!byte 0
V1CEnv_En	!byte 0
V1CFlags	!byte 0
V1CTnSlDl	!byte 0
V1CTSlStp	!word 0
V1CTnDelt	!word 0
V1CNtSkCn	!byte 0
V1CVolume	!byte 0
; GlobalVars
V1MODADDR	!word 0
V1OrnPtrs	!word 0
V1SamPtrs	!word 0
V1PatsPtr	!word 0
V1AdInPtA	!word 0
V1AdInPtB	!word 0
V1AdInPtC	!word 0
V1CrPsPtr	!word 0
V1LPosPtr	!word 0
V1Delay	    !byte 0
V1DelyCnt	!byte 0
V1ESldAdd	!word 0
V1CurESld	!word 0
V1Env_Del	!byte 0
V1CurEDel	!byte 0
V1Ns_Base	!byte 0
V1AddToNs	!byte 0
V1AddToEn	!byte 0
V1EnvBase	!word 0
V1AYREGS	!fill 14,0
; -------------------------------------
VARS2	
V2CurPos	!byte 0
V2PosSub	!byte 0
V2ModNum	!byte 0 ;bit0: ChipNum | bit1: 1-reversed patterns order (AlCo TS)
; CHANNEL A
V2ChanA	
V2APsInOr	!byte 0
V2APsInSm	!byte 0
V2ACrAmSl	!byte 0
V2ACrNsSl	!byte 0
V2ACrEnSl	!byte 0
V2ATSlCnt	!byte 0
V2ACrTnSl	!word 0
V2ATnAcc	!word 0
V2ACOnOff	!byte 0
V2AOnOffD	!byte 0
V2AOffOnD	!byte 0
V2AOrnPtr	!word 0
V2ASamPtr	!word 0
V2ANNtSkp	!byte 0
V2ANote	    !byte 0
V2ASlToNt	!byte 0
V2AEnv_En	!byte 0
V2AFlags	!byte 0
V2ATnSlDl	!byte 0
V2ATSlStp	!word 0
V2ATnDelt	!word 0
V2ANtSkCn	!byte 0
V2AVolume	!byte 0
; CHANNEL B
V2ChanB
V2BPsInOr	!byte 0
V2BPsInSm	!byte 0
V2BCrAmSl	!byte 0
V2BCrNsSl	!byte 0
V2BCrEnSl	!byte 0
V2BTSlCnt	!byte 0
V2BCrTnSl	!word 0
V2BTnAcc	!word 0
V2BCOnOff	!byte 0
V2BOnOffD	!byte 0
V2BOffOnD	!byte 0
V2BOrnPtr	!word 0
V2BSamPtr	!word 0
V2BNNtSkp	!byte 0
V2BNote	    !byte 0
V2BSlToNt	!byte 0
V2BEnv_En	!byte 0
V2BFlags	!byte 0
V2BTnSlDl	!byte 0
V2BTSlStp	!word 0
V2BTnDelt	!word 0
V2BNtSkCn	!byte 0
V2BVolume	!byte 0
; CHANNEL C
V2ChanC
V2CPsInOr	!byte 0
V2CPsInSm	!byte 0
V2CCrAmSl	!byte 0
V2CCrNsSl	!byte 0
V2CCrEnSl	!byte 0
V2CTSlCnt	!byte 0
V2CCrTnSl	!word 0
V2CTnAcc	!word 0
V2CCOnOff	!byte 0
V2COnOffD	!byte 0
V2COffOnD	!byte 0
V2COrnPtr	!word 0
V2CSamPtr	!word 0
V2CNNtSkp	!byte 0
V2CNote	    !byte 0
V2CSlToNt	!byte 0
V2CEnv_En	!byte 0
V2CFlags	!byte 0
V2CTnSlDl	!byte 0
V2CTSlStp	!word 0
V2CTnDelt	!word 0
V2CNtSkCn	!byte 0
V2CVolume	!byte 0
; GlobalVars
V2MODADDR	!word 0
V2OrnPtrs	!word 0
V2SamPtrs	!word 0
V2PatsPtr	!word 0
V2AdInPtA	!word 0
V2AdInPtB	!word 0
V2AdInPtC	!word 0
V2CrPsPtr	!word 0
V2LPosPtr	!word 0
V2Delay	    !byte 0
V2DelyCnt	!byte 0
V2ESldAdd	!word 0
V2CurESld	!word 0
V2Env_Del	!byte 0
V2CurEDel	!byte 0
V2Ns_Base	!byte 0
V2AddToNs	!byte 0
V2AddToEn	!byte 0
V2EnvBase	!word 0
V2AYREGS	!fill 14,0
; -------------------------------------
VT_	= *-16
;first 12 values of tone tables (unpacked)
T1_
        !word $10e1 
        !word $0fdb
        !word $0f15
        !word $0e18
        !word $0d5b
        !word $0c94
        !word $0be0
        !word $0b35

        !word $0a92
        !word $0a02
        !word $0968
        !word $08e1
        !word $0eef
        !word $0e18
        !word $0d4d
        !word $0c8e

        !word $0bd9
        !word $0b30
        !word $0a8e
        !word $09f7
        !word $0968
        !word $08e1
        !word $0861
        !word $07e9

        !word $0e7e
        !word $0dae
        !word $0ce9
        !word $0c30
        !word $0b80
        !word $0adb
        !word $0a40
        !word $09ac

        !word $0921
        !word $089d
        !word $0823
        !word $07ad
        !word $073f
        !word $0ebb
        !word $0de8
        !word $0d20
        
        !word $0c63
        !word $0bb2
        !word $0b0a
        !word $0a6b
        !word $09d5
        !word $0948
        !word $08c3
        !word $0844

        !word $07ce
T1_END

T_OLD_1	= T1_
T_OLD_2	= T_OLD_1+24
T_OLD_3	= T_OLD_2+24
T_OLD_0	= T_OLD_3+2
T_NEW_0	= T_OLD_0
T_NEW_1	= T_OLD_1
T_NEW_2	= T_NEW_0+24
T_NEW_3	= T_OLD_3

        !fill (240-(T1_END-T1_))

NT_	    !fill 192           ; CreatedNoteTableAddress

BITTABLE !byte %00000001, %00000010, %00000100

VARSEND = *
; =============================================================================
MD1LADDR                        ; Module 1 loading address
MD2LADDR    = MD1LADDR+$14BE    ; Module 2 loading address
FRAMEMAX    = 5967
!binary "Unreeeal Superhero 3.pt3"


