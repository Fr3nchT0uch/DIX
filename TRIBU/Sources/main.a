; ACME 0.96.4
; 
; [binary MAX Size: (16+12)*256 = 7168 bytes]
;
; UNREEEAL SUPERHERO 3 TRIBUTE 
; GROUiK / FRENCH TOUCH
; 01/2020
;
; v0.08 - Release version
;
!cpu 6502
!convtab "a2txt.bin" ; 
!sl "lbl_main.txt"

; INCLUDE
!source "lbl_pts.txt"
!source "lbl_sub.txt"
!source "../../macros.a"

           *= $E000 ; ORG = $D000 (RAM Langage Card)

; =====================================
VERTBLANK   = $C019
; FLOAD       = $FC00     ; routine Fast Load XTREME - MAIN
; =====================================
; PAGE ZERO
bRefresh    = $01   ; byte REFRESH RATE ($00/50Hz | $01/60Hz)
bSLOT       = $02   ; numero SLOT * 0x10
IntL        = $03   ; L value for INT delay
IntH        = $04   ; H value for INT delay

; FAST LOAD
; PISDEP      = $0A   ; PISTE DE DEPART
; SECDEP      = $0B   ; SECTEUR DE DEPART
; BUFFER      = $0C   ; Buffer LOW+HIGH ; + $0D
; TOTSEC      = $0E   ; TOTAL DES SECTEURS A CHARGER
; CURTRK1     = $0F   ; piste de dï¿½part DRIVE 1 - A INITIALISER A ZERO pour le premier appel !

MB_BASEADDR = $10 ; 16b

MBpatch_start = $12 ;16b
MBpatch_end = $14   ;16b

MB_BASEADDR2 = $16 ;16b
Temp  = $18

save_A      = $30
save_X      = $31
save_Y      = $32

Tick        = $3D   ; +$3E

; -------------------------------------
z80_A       = $70
z80_C       = $71
z80_B       = $72
z80_E       = $73
z80_D       = $74
z80_L       = $75
z80_H       = $76
z80_IX      = $77       ; +$78
z80_IY      = $79       ; +$7A
z80_AP      = $7B
val1        = $7C       ; +$7D
val2        = $7E       ; +$7F
; -------------------------------------
cSwap       = $90
bAnimK7     = $91
cAnimK7     = $92

; F4~FE INTs 
DISPSYNC		= $F4
VSYNC		= $F5
T2Timing    	= $F6 ;16b
WaitSyncPTR 	= $F8 ;16b
WaitDisplayPTR 	= $FA ;16b
T1RoutPTR 	= $FC ;16b 
T2SyncCodePTR 	= $FE ;16b
; =============================================================================
MAIN
!zone

  ; Patch Mockingboard registers
  +set_ptr Init_MB,MBpatch_start
  +set_ptr WAIT65,MBpatch_end
  JSR MB_PATCH
  +set_ptr $8D70,MBpatch_start   ; ROUT
  +set_ptr $9066,MBpatch_end     ; FIX16BITS
  JSR MB_PATCH
        LDA #00
        STA MB_BASEADDR2
        STA MB_BASEADDR2+1
        JSR DETECT_SECONDMB

            LDA #<(TextScroll-1)
            STA iText
            LDA #>(TextScroll-1)
            STA iText+1
            LDA #00
            STA CountScroll
            STA cSpace
            STA sScroll
            STA cSwap
            STA cDisplayFreq
            STA bAnimK7 
            LDA TextScroll
            STA nextchar
            LDA #15
            STA cAnimK7

  CLI            
            ; ERASE LORES2
            LDX #04
            LDA #00
            TAY
.l1         STA $800,Y
            DEY
            BNE .l1
            INC .l1+2
            DEX
            BNE .l1
            ; change mode (clean way -> wait for next VBL)
            JSR WAIT_VSYNC

            LDA $C050
            LDA $C055
            LDA $C056

            ; set LORES data
            LDX #39
-           LDA LORES,X
            STA $428,X
            LDA LORES+40,X
            STA $4A8,X
            LDA LORES+80,X
            STA $528,X
            DEX
            BPL -
            ; set Text data
            LDA #$20
            STA $750
            STA $750+39
; =============================================================================
Init_MB     ; init Mockingboard             
!zone
            ; init MB (6522/AY1) / (6522/AY2)
            LDA #$FF
            STA $CF03          ; DDRA1
            STA $CF83
            ; ---------
            LDA #$07
            STA $CF02          ; DDRB1
            STA $CF82
            ; ---------
            ; clean REGISTER AY1 / AY2
            LDA #$00
            STA $CF00
            STA $CF80
            ; ---------
            LDA #$04
            STA $CF00
            STA $CF80

; -------------------------------------
; init Player PT3
            JSR INIT
; -------------------------------------
Init_INT    ; init interrupt
!zone       

 
            SEI                 ; inhib

            +set_ptr INT_ROUT1, T2SyncCodePTR
  
            STA $C054                                                       ; 4
            STA $C052                                                       ; 4               
            STA $C050           ; gfx                                       ; 4
            STA $C057           ; hires                                     ; 4

            STA $C010           ; keyboard strobe                           ; 4

            LDA #$00                                                        ; 2
            STA Tick                                                        ; 3
            STA Tick+1                                                      ; 3
  +set_ptr PLAYTICK, T1RoutPTR ; music

; =================================================================================================
            CLI
LOOP        NOP : NOP : NOP : NOP : NOP : NOP : NOP : NOP : NOP : NOP : NOP ; needed!
  LDA $C000
  BPL +
  STA $C010
  CMP #27+$80 ; ESC
  BEQ .exit

+           LDA Tick+1
            CMP #>(FRAMEMAX+1) ; +1 to check if loop enable or not
            BNE LOOP
            LDA Tick
            CMP #<(FRAMEMAX+1)
            BNE LOOP

            ; end... MUTE / black screen
.exit       JSR MUTE
            LDA $C056
            LDA $C055
            ;LDA #%01000000
STOPINT     ;STA $CF0E           ; $CX0E => VIA_IER
END         RTS
; =============================================================================
INT_ROUT1
!zone
;DELAY = 25                  ; value FOR AIPC (to compensate timing issue)
DELAY = 24                  ; value FOR APPLEWIN / REAL APPLE II
TIMER2 = 8*8*65-1*65-DELAY+4
		 ;   STA save_A                                                      
            ; redefine timer
             STA $C050           ; GFX
            STA $C054           ; page1           SEC
            LDA #<TIMER2                                                             
            ;SBC IntL
            STA IntL
            LDA #>TIMER2
            ;SBC IntH
            STA IntH
            CLC
            LDA IntL                                                   
            ;ADC $CF08           ; + clear interrupt                 ; 4                   
            STA $CF08                                               ; 4
            STA IntL                                                ; 3       
            LDA IntH                                                ; 3      
            ;ADC $CF09                                               ; 4
            STA IntH                                                ; 3   
            STA $CF09           ; + launch timer                    ; 4 = 25   
                          

            +set_ptr INT_ROUT2, T2SyncCodePTR
                                                                   
  RTS
; =============================================================================
INT_ROUT2
TIMER3 = 3*8*65-2*65-DELAY
  ;          STA save_A                                                      
            STA $C056           ; LORES                                     
            STA $C054           ; PAGE1                                     

            ; redefine timer
            SEC
            LDA #<TIMER3                                                             
            ;SBC IntL
            STA IntL
            LDA #>TIMER3
            ;SBC IntH
            STA IntH
            CLC
            LDA IntL                                                   
            ;ADC $CF08           ; + clear interrupt                 ; 4                   
            STA $CF08                                               ; 4
            STA IntL                                                ; 3       
            LDA IntH                                                ; 3      
            ;ADC $CF09                                               ; 4
            STA IntH                                                ; 3   
            STA $CF09           ; + launch timer                    ; 4 = 25                                     

            ; redefine INT   
            +set_ptr INT_ROUT3, T2SyncCodePTR               
 
  RTS
; =============================================================================
INT_ROUT3
TIMER4 = 11*8*65-2*65-DELAY
 ;           STA save_A
            STA $C057           ; HIRES
MODPAGE     STA $C054           ; page X
              
           ; redefine timer
            SEC
            LDA #<TIMER4                                                             
            ;SBC IntL
            STA IntL
            LDA #>TIMER4
            ;SBC IntH
            STA IntH
            CLC
            LDA IntL                                                   
            ;ADC $CF08           ; + clear interrupt                 ; 4                   
            STA $CF08                                               ; 4
            STA IntL                                                ; 3       
            LDA IntH                                                ; 3      
            ;ADC $CF09                                               ; 4
            STA IntH                                                ; 3   
            STA $CF09           ; + launch timer                    ; 4 = 25                                     

            ; redefine INT    
            +set_ptr INT_ROUT4, T2SyncCodePTR                

  RTS
; =============================================================================
INT_ROUT4
TIMER5 = 1*8*65-DELAY-2*65-20
  ;          STA save_A
            STA $C051           ; Text
            STA $C054           ; page1

            ; redefine timer
            SEC
            LDA #<TIMER5                                                             
            ;SBC IntL
            STA IntL
            LDA #>TIMER5
            ;SBC IntH
            STA IntH
            CLC
            LDA IntL                                                   
            ;ADC $CF08           ; + clear interrupt                 ; 4                   
            STA $CF08                                               ; 4
            STA IntL                                                ; 3       
            LDA IntH                                                ; 3      
            ;ADC $CF09                                               ; 4
            STA IntH                                                ; 3   
            STA $CF09           ; + launch timer                    ; 4 = 25                                

            ; redefine INT                  

            +set_ptr INT_ROUT5, T2SyncCodePTR  

            RTS
; =============================================================================
INT_ROUT5
TIMER1 = 120*65+1*8*65 - DELAY
    ;        STA save_A
            STA $C050           ; GFX
            STA $C054           ; page1
            
            +set_ptr INT_ROUT1, T2SyncCodePTR  
            RTS

ANIMATIONS
            ; -------------------------
            ; ANIMATIONS 
            JSR DIS_FREQ
            JSR SCROLLTEXT
            ; -------------------------
            ; SWAP PAGE ANIM  
            LDA cSwap
            BNE .next           ; already in progress
            ; check AY1/Tone Channel B only (related to THIS PT3)
            LDA V1AYREGS+09     ; volume b
            CMP #$0C
            BCC .shunt
            LDA #3
            STA cSwap
            LDA #$55           
            BNE +               ; always
            ; swap
.next       DEC cSwap
            BNE .shunt          ; end of swap ?
            LDA #$54            ; yes: restore page1
+           STA MODPAGE+1       ; set page
            ; -----------
            JMP .fd             ; force display anime K7, same anim/other page
.shunt      ; -------------------------
            ; ANIM K7
            DEC cAnimK7
            BNE .end
            LDA #15
            STA cAnimK7
            LDA bAnimK7         ; change boolean
            EOR #01
            STA bAnimK7
.fd         LDA MODPAGE+1
            CMP #$54
            BEQ .animP1
            ; anim P2
            LDA bAnimK7
            BEQ +
            JSR ANIM_1P2
            JMP .end
+           JSR ANIM_2P2
            JMP .end
            ; anim P1
.animP1     LDA bAnimK7
            BEQ +
            JSR ANIM_1P1
            JMP .end
+           JSR ANIM_2P1
            ; -------------------------
.end 
        RTS

PLAYTICK
  +set_ptr INT_ROUT1, T2SyncCodePTR 
  CLI
  JSR PLAY            ; music! (one tick)                         
            ; frame counter
  INC Tick                                                                            
  BNE +                                                                               
  INC Tick+1 
+      JSR ANIMATIONS
  RTS
; =============================================================================
!align 255,0
WAIT65              ; = attend Y * 65 cycles exactement (JSR/RTS compris -> APPEL EN 8 cycles obligatoire -> LDY #xx / JSR WAIT65)
WAIT65ZP = * + 1    ; = attend Y * 65 cycles exactement (JSR/RTS compris -> APPEL EN 9 cycles obligatoire -> LDY ZP / JSR WAIT65Z)
!zone           
		    LDA $EA     ; 3 (dummy)  -> on arrive sur NOP si JSR WAIT65Z
WAIT62      ; = attend 1*62 cycles exactement (JSR/RTS compris -> LDY #01 / JSR WAIT63)
            DEY			; 2					
		    BEQ .S1	    ; 3/2			
                  
.WL1 	    LDX #$0B				            
.WL2 	    DEX							
		    BNE .WL2	; 2 + (2+3)*10 + 2 + 2 = 56															
                      
		    NOP			; 2					
		    NOP			; 2					
		    DEY			; 2					
		    BNE .WL1	; (56+2+2+2+3)*(Y-2) + 56 + 2 + 2 + 2 + 2 = 65*Y - 2*65 + 64 = 65*Y - 66				

WAIT59      ; = attend 1*59 cycles exactement (JSR/RTS compris -> LDY #xx / JSR WAIT59)											                      
		    LDX #$08					
.WL3 	    DEX							
		    BNE .WL3	; 2 + (2+3)*7 + 2 + 2 = 41					
                							
		    NOP			; 2					
		    NOP			; 2					
		    RTS			; 6

                        ; WAIT62 = 2 + 2 + (65-66) + 41 + 2 + 2 + 6 + (8) = 62 
                        ; WAIT65 = 3 + 2 + 2 + (65*Y-66) + 41 + 2 + 2 + 6 + (8) = 65*Y
                        ; WAIT59 = 41 + 2 + 2 + 6 + (8) = 59 					

WAIT57      ; = attend 1*57 cycles exactement (JSR/RTS compris -> LDY #xx / JSR WAIT57)											         
.S1	 	    NOP         ; 2
WAIT55      ; = attend 1*55 cycles exactement (JSR/RTS compris -> LDY #xx / JSR WAIT55)	
            LDX #08					
                      
.WL4 	    DEX							
		    BNE .WL4    ; 2 + (2+3)*7 + 2 + 2 = 41					
		    RTS         ; 6
                        ; = 49

                        ; WAIT65 = 3 + 2 + 3 + 49 + (8) = 65
                        ; WAIT62 = 2 + 3 + 49 + (8) = 62
                        ; WAIT57 = 49 + (8) = 57
                        ; WAIT55 = 47 + (8) = 55
; =============================================================================
; patch all STAs/STXs to mockinboard registers

MB_PATCH
!zone
    LDA MBpatch_end+1
    STA .modmb1+1
    LDA MBpatch_end
    STA .modmb2+1
.loop
    LDY #0
    LDA (MBpatch_start),Y
    CMP #$8D    ; "STA xxxx"
    BEQ .yes2
    CMP #$8C    ; "STY xxxx"
    BEQ .yes2
    CMP #$2C    ; "BIT xxxx"
    BEQ .yes2
    CMP #$AD    ; "LDA xxxx"
    BEQ .yes2
    CMP #$6D    ; "ADC xxxx"
    BEQ .yes2
    CMP #$8E    ; "STX xxxx"
    BNE .not
.yes2
     INY
      LDA (MBpatch_start),Y
      AND #$F0
     CMP #$00
     BEQ .yes
     CMP #$80
     BNE .not
.yes
    INY
    LDA (MBpatch_start),Y
MB_PATCH_MOD
    CMP #$CF        ; "STA $CFxx" or "STX $CFxx"
    BNE .not
    ; patching
MB_PATCH_MOD2
    LDA MB_BASEADDR+1
    STA (MBpatch_start),Y
.not
    INC MBpatch_start
    BNE +
    INC MBpatch_start+1
+   LDA MBpatch_start+1
.modmb1
    CMP #$00
    BNE .loop
    LDA MBpatch_start
.modmb2
    CMP #$00
    BNE .loop
    RTS

; =============================================================================
; Detect second Mockingboard

DETECT_SECONDMB
        LDA MB_BASEADDR+1
        AND #$07
        STA bdet+1
        DEC bdet+1      ; start after the current MB
        BNE bdet
        RTS       ; 00 => no more MB
bdet    LDA #$07                ; on commence en $C7 jusqu'en $C1
        ORA #$C0                ; -> $Cx
        STA MB_BASEADDR2+1
        LDY #04                 ; $CX04
        LDA (MB_BASEADDR2),Y            ; timer 6522 (Low Order Counter) - attention compte Ã  rebour !
        STA Temp                ; 3 cycles
        LDA (MB_BASEADDR2),Y            ; + 5 cycles = 8 cycles entre les deux accÃ¨s au timer
        SEC                     ; 
        SBC Temp                ; 
        CMP #$F8                ; -8 (compte Ã  rebour) ?
        BEQ +
        DEC bdet+1              ; on dÃ©crÃ©mente le "slot" pour tester le suivant
        BNE bdet                ; on boucle de 7 Ã  1
        LDA #0
        STA MB_BASEADDR2+1
        RTS     ; slot 0 => no new MB detected
+ 
  LDA #$CE
  STA MB_PATCH_MOD+1
  LDA #<MB_BASEADDR2+1
  STA MB_PATCH_MOD2+1
  +set_ptr Init_MB2,MBpatch_start
  +set_ptr EO_Init_MB2,MBpatch_end
  JSR MB_PATCH
  +set_ptr $8D70,MBpatch_start   ; ROUT
  +set_ptr $9077,MBpatch_end     ; FIX16BITS
  JSR MB_PATCH

Init_MB2     ; init Mockingboard 2          
!zone
            ; init MB (6522/AY1) / (6522/AY2)
            LDA #$FF
            STA $CE03          ; DDRA1
            STA $CE83
            ; ---------
            LDA #$07
            STA $CE02          ; DDRB1
            STA $CE82
            ; ---------

            ; clean REGISTER AY1 / AY2
            LDA #$00
            STA $CE00
            STA $CE80
            ; ---------
            LDA #$04
            STA $CE00
            STA $CE80
            ; ---------
  RTS
EO_Init_MB2
; =============================================================================

WAIT_DISPLAY
  JMP (WaitDisplayPTR)

WAIT_VSYNC
  JMP (WaitSyncPTR)

LORES
!binary "lores.bin"
; =============================================================================

ENDMAIN