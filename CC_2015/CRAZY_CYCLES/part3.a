;@com.wudsn.ide.asm.hardware=APPLE2 
; ACME 0.90
; CRAZY CYCLES
; PART III
; version 0.02

!convtab "a2txt.bin" 	; incorporation table caractère APPLE II (normal) générale
!sl "mainlabel.a"		; sauvegarde labels (debug)

		*= $6000 		; ORG = $6000

; CONSTANTES PROGRAMME =================


; CONSTANTES SYSTEME ===================
VERTBLANK	 	= $C019	; 

; Page ZERO
bMachine 		= $0A	; byte MACHINE ($7F/IIE | $FF/GS)
bRefresh		= $0B	; refresh rate : type NTSC/60Hz - PAL/50Hz (00 = 50HZ | 01 = 60 HZ)
; --------------------------------------
COUNT			= $F8

Deplace			= $F9

IndexAnim		= $FA

ADRHIR			= $FB	; +$FC
ADRText			= $FD	; +FE
Temp			= $FF
; =============================================================================
PARTIII	
!zone		
		LDA #(MAXGvD/2)
		STA Deplace		; on commence déplacement vers la gauche

		LDA #00
		STA IndexAnim
		LDA #04
		STA COUNT
		
		LDA #<StringText
		STA ADRText
		LDA #>StringText
		STA ADRText+1 
; -----------------------------------------------------------------------------
SYNCHRO
!zone		
.LS1	LDA $C070		; lecture $02  ** important - $7D2
		CMP #$D3		; 
		BNE .LS1
		NOP
		NOP
		NOP
		NOP
		NOP				;
		LDA $C070		; lecture $14 ** important - $7E4
		CMP #$A0			
		BNE .LS1
		NOP
		NOP
		NOP
		NOP
		NOP	
		LDA $C070		; 4 ;lecture $26 ** important - $7F6
 		CMP	#$CF		; 2
		BNE .LS1    	; 2 = 8

		; début synchro 
		; on attend 65 cycles - 08 déjà effectués = 57 pour retrouver le byte en $426 (nouvelle ligne sur les 8)

		LDA Temp		; 3

.LS2	; 11 cycles déjà fait ici sur les 65
		LDX #$0A
.WL1	DEX	
		BNE .WL1		; 51 cycles  

		LDA Temp		; 3
						; = (8 + 3) + 51 + 3 = 65
				
		LDA $C070		; 4		; lecture des "autres lignes" en $7F6
		CMP #$CF		; 2
		BNE .S2			; 2/3
		JMP .LS2		; 3  
						; = 11 ; on boucle tant qu'on trouve $66 à cette position

.S2		; quand on arrive ici, on est position $26 de la première ligne de VBL
		; on "revient" au début de la seconde ligne
		; (4-2) + 2 + 3 = 7 cycles déjà effectué en "HBL" de la première ligne de VBL
		; 25-7 = 18

		; 
		; empiriquement, il faudrait 18 en théorie

		LDA $C051		; 4
		LDA Temp		; 3
		INC Temp		; 5
		LDA Temp		; 3

; on arrive début seconde ligne de VBL
; --------------------------------------------
; suivant PAL OU NTSC
; 1 ligne VBL (NTSC) ou 1 + 50 ligne VBL (PAL)
		LDA bRefresh	; 3
		BNE .NTSC		; 3 / (2)
		
		NOP
		NOP			; 3 (appel routine WAIT) + 1 (compensé BNE non pris)
		LDY #50
		JSR WAIT 	; 50 * 65 (PAL)

.NTSC	; 65 - 6 cycles = 59
		LDX #11
.BW0	DEX
		BNE .BW0 ; 56
		LDA Temp ; 3 
; --------------------------------------------
; début 3ème ligne de VBL
		LDA Temp
		LDY #68 		; 70 - 2 ; [ 2 lignes de VBL déjà effectuées]
		JSR WAIT
; =======================================================
BP
;MAXGvD			= $08
;MAXDvG			= $f8
MAXGvD			= $10
MAXDvG			= $f0
;MAXGvD			= $20
;MAXDvG			= $e0
!zone
; ***************************************
; [DISPLAY] * 83 lignes => 65 * 83 = 5395

; ----- ------- STARFIELD ---------------
		; ))))>
		LDX #28					; 2		nb d'étoiles

		; <///// (C) = 79
.BP		LDY STAR_SPEED,X		; 4 	on diminue le compteur speed
		DEY						; 2
		BEQ .action				; 3/2	on déplace si on arrive à zero

		; on doit compenser 71 + 1 = 72 cycles
		; 72 cycles ici
		TYA						; 2
		STA STAR_SPEED,X		; 5

		LDY #11
.bw1	DEY 
		BNE .bw1				; 56
		NOP
		NOP						; 
		NOP						; 6
		JMP .suite				; 3


		; <**** (A)+(B) 
.action ; <=== (B)
		LDA STAR_BASE_SPEED,X 	; 4		on récupère la valeur de la speed par défaut
		STA STAR_SPEED,X		; 5		on réinitialise le compteur speed
		LDY STAR_Y,X			; 4		on récupère l'ordonnée de l'étoile à traiter
		LDA THB,Y				; 4
		STA ADRHIR				; 3
		LDA THH,Y				; 4
		STA ADRHIR+1			; 3
		
		LDY STAR_X,X			; 4		on récupère l'abscisse de l'étoile à traiter
		LDA (ADRHIR),Y			; 5		on récupère l'étoile à traiter
		LSR						; 2		on décalle d'un cran à gauche (déplacement)
		STA (ADRHIR),Y			; 6		on affiche l'étoile (ou on l'efface suivant où on en est dans le déplacement)
								; (B) ===>	44			
		BEQ	.vide				; 3/2	si étoile non "vide" suite à déplacement
		; on doit compenser 24 cycles + 1 = 25
		; 25 cycles ici
		INC Temp
		INC Temp
		INC Temp
		INC Temp				; 20 
		NOP						; 2
		JMP .suite				; 3
.vide
		; <=== (A)
		; si étoile "vide"
		DEY						; 2 	on décrémente l'abscisse (encore dans Y)
		TYA						; 2		on transfert pour A (pour la future sauvegarde)
		BMI .s1					; 3/2	si on sort du bord gauche
		JMP .s2					; 3
.s1		LDA #39					; 2		on réinitialise valeur bord droit		
.s2		STA STAR_X,X			; 5		on sauve la nouvelle abscisse
		TAY						; 2		on met la nouvelle valeur dans Y
		LDA #$80				; 2		pixel 1 (premier droite)
		STA (ADRHIR),Y  		; 6		on affiche l'étoile à sa nouvelle position (0-39)
								; (A) ===> 24
								; (A) + (B) ****> [71] 
								; (C) ////> [80] 
		; suite
.suite	DEX						; 2
		BPL .BP					; 3/2
								; = 2 + (80+2+3)*28 + (80+2+2)
; 								; ))))> =  2466

; 83*65 = 5395
; - 2466
; = 2929
; /65 = 45 + (4)		
		
		NOP
		NOP						; 4
		
		LDA Temp
		LDY #45			
		JSR WAIT				; 37*65 = 2405
; ********************************************
!zone
; --------------------------------------
; [DISPLAY] * 1 "ligne" = 66 ou 64 cycles pour générer le scrolling
		LDY Deplace		; 3
		bmi .DvG		; 3/2
		JMP .GvD		; 3
		
.GvD	; 8 cycles déjà effectués

		DEY				; 2
		BEQ	.s1			; 3/2
		JMP .s2			; 3
.s1		LDY #MAXDvG		; 2
.s2		STY Deplace		; 3
						; = 10
						; + 8 = 18
; pour obtenir 66 cycles .......
		LDX #8
.BW0	DEX
		BNE .BW0		; 41		
		NOP
		NOP				; 4
		JMP .suite		; 3
						; = 48
; .............................

.DvG 	; 6 cycles déjà effectués
		NOP			; + 2 = 8

		INY				; 2
		BEQ	.s3			; 3/2
		JMP .s4			; 3
.s3		LDY #MAXGvD		; 2
.s4		STY Deplace		; 3
						; = 10
						; + 8 = 18
; 64 cycles ...................
		LDX #9
.BW1	DEX
		BNE .BW1		; 46
; .............................

; ------------------------------------
; [DISPLAY] * 88 lignes
; ***  *** 		wpart 1
; *     *		wpart 2
; **    *		wpart 3
; *     *		wpart 2
; *     *		wpart 2
; ------------------------------------
.suite
		JSR WPart1			
		JSR WPart1
		JSR WPart1
		JSR WPart1
		JSR WPart1
		JSR WPart1
		JSR WPart1
		JSR WPart1
		JSR WPart1			
		JSR WPart1
		JSR WPart1			
		JSR WPart1
		JSR WPart1			
		JSR WPart1
		JSR WPart1			
		JSR WPart1
		JSR WPart1			
		JSR WPart1
		JSR WPart1			
		JSR WPart1
		JSR WPart1			
		JSR WPart1
		
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		
		JSR WPart3			
		JSR WPart3
		JSR WPart3			
		JSR WPart3
		JSR WPart3
		JSR WPart3
		JSR WPart3
		JSR WPart3
		JSR WPart3
		JSR WPart3
		JSR WPart3			
		JSR WPart3
		JSR WPart3			
		JSR WPart3
		JSR WPart3			
		JSR WPart3
		JSR WPart3			
		JSR WPart3
		JSR WPart3			
		JSR WPart3
		JSR WPart3			
		JSR WPart3
		
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2			
		JSR WPart2
		JSR WPart2
		JSR WPart2	
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		JSR WPart2
		;JSR WPart2
; -------------------------------------
; [DISPLAY] * 21 lignes
; -------------------------------------
		LDA Temp
		LDY #21				
		JSR WAIT					; 65*x
; -------------------------------------
; [VBL] * première ligne VBL		
; [VBL] * 70-2(2) = 68 lignes VBL

; *************************************
; SCROLL TEXT 1 ligne pendant VBL soit => 68*65 = 4420 cycles de dispo
; *************************************
	 ; 78 * 4 = 312 cycles
	 lda $7d1
     sta $7d0
     lda $7d2
     sta $7d1
     lda $7d3
     sta $7d2
     lda $7d4
     sta $7d3
     lda $7d5
     sta $7d4
     lda $7d6
     sta $7d5
     lda $7d7
     sta $7d6
     lda $7d8
     sta $7d7
     lda $7d9
     sta $7d8
     lda $7da
     sta $7d9
     lda $7db
     sta $7da
     lda $7dc
     sta $7db
     lda $7dd
     sta $7dc
     lda $7de
     sta $7dd
     lda $7df
     sta $7de
     lda $7e0
     sta $7df
     lda $7e1
     sta $7e0
     lda $7e2
     sta $7e1
     lda $7e3
     sta $7e2
     lda $7e4
     sta $7e3
     lda $7e5
     sta $7e4
     lda $7e6
     sta $7e5
     lda $7e7
     sta $7e6
     lda $7e8
     sta $7e7
     lda $7e9
     sta $7e8
     lda $7ea
     sta $7e9
     lda $7eb
     sta $7ea
     lda $7ec
     sta $7eb
     lda $7ed
     sta $7ec
     lda $7ee
     sta $7ed
     lda $7ef
     sta $7ee
     lda $7f0
     sta $7ef
     lda $7f1
     sta $7f0
     lda $7f2
     sta $7f1
     lda $7f3
     sta $7f2
     lda $7f4
     sta $7f3
     lda $7f5
     sta $7f4
     lda $7f6
     sta $7f5
     lda $7f7
     sta $7f6
; ------------------------
; c = 312

	; nouvelle entrée colonne 27
	; NewLetter
		LDA (ADRText,X)		; 6
		CMP #$FF			; 2
		BNE .sa2			; 3/2

		DEC COUNT			; 5
		BNE .sa0			; 3
		; ---
		RTS					; OUT on sort si on a déjà fait 5 tours de "scroll"
		; ---
.sa0	LDA #<StringText	; 2
		STA ADRText			; 3
		LDA #>StringText	; 2
		STA ADRText+1 		; 3 
		LDA (ADRText,X)		; 6 
		JMP .sa1			; 3 = 27
.sa2	; 27-1 à compenser = 26
		LDX #05
.bl1	DEX
		BNE .bl1			; = 26

.sa1	STA $7F7			; 4	==> 41

		INC ADRText			; 5
		BNE .sa3			; 3/2
		INC ADRText+1		; 5
		JMP .sa4			; 3
				
.sa3	; 8-1 = 7 à compenser
		INC Temp
		NOP					; = 7
.sa4						; =====> 41 + 15 = 56
; c = 312 + 56 = 368
; 65 * 68 = 4420
; 4420 - 368 = 4052
; / 65 = 62 + (22)

		LDX #3
.bw0	DEX
		BNE .bw0		; 16
		SBC (Temp,X)	; + 6 = 22
; *************************************
; 62 * 65 = 4030 cycles
;  animation title CRAZY CYCLES
;

		; ===>
; 		affichage
		LDY IndexAnim			; 3
		LDX TableAffiche,Y		; 4
		LDA Title1,X			; 4
		STA $400,X				; 5
		LDA Title2,X
		STA $480,X
		LDA Title3,X
		STA $500,X
		LDA Title4,X
		STA $580,X
		LDA Title5,X
		STA $600,X
		LDA Title6,X
		STA $680,X
		LDA Title7,X
		STA $700,X
		LDA Title8,X
		STA $780,X				; 9*8 = 72
								; + 7 = 79
; 		effacement
		LDX TableEfface,Y		; 4
		LDA #$A0				; 2			espace 
		STA $400,X				; 5
		STA $480,X
		STA $500,X
		STA $580,X
		STA $600,X
		STA $680,X
		STA $700,X
		STA $780,X				; 5*8+2 = 42
								; + 4 = 46

		INY						; 2
		CPY #78					; 2
		BEQ .ss1				; 3/2
		JMP .ss2				; 3
.ss1	LDY #00					; 2
.ss2	STY IndexAnim			; 3
								; = 12

								; c = 79 + 46 + 12 = 137
		; <=== 137

; 62*65 = 4030 = cycles à respecter !
; 4030 - 137 = 	3893
; /65 = 59 + (58)

		LDX #11
.bw1	DEX
		BNE .bw1		; 56
		NOP				; + 2 = 58
; ------------------------------------	
		LDA Temp		;
		LDY #59			;
		JSR WAIT		; = 59 * 65 = 3835
; *************************************
; --------------------------------------------
; suivant PAL OU NTSC => 65*1 ou 65*50 + 65*1
; [VBL] * 1 ligne VBL (NTSC) ou 1 + 50 ligne VBL (PAL) (2)
		LDA bRefresh	; 3
		BNE .NTSC		; 4 / (2) (!!! 	attention ici)
		
		NOP 		; 2 (compense le BNE non pris, on compense ici de + 2 suite à non alignement)
		NOP
		;LDA Temp	; NOP ici si alignement car on ne compense que d'un, donc appel en 10 et non 11)
		LDY #50
		JSR WAIT 	; 50 * 65 (PAL)

.NTSC	; 65 - 6 cycles = 59
		LDX #11
.BW2	DEX
		BNE .BW2 ; 56
		;NOP		 ; 2  <-- LDA Temp ; 3 si alignement oki
		LDA Temp
; --------------------------------------------
; [VBL] * 1 ligne VBL (2)
		
		LDA $C000		; 4		clavier
		EOR $C061		; 4		bouton 1
		BPL .suite2		; 3
						; = 11
		; ---
		RTS				; sortie !
		; ---
.suite2		
		LDX #9
.BW3	DEX
		BNE .BW3		; 46
		INC Temp		; 5
		JMP BP			; 3 
						; = 65 cycles
; =============================================================================
!align 255,0
; split 
WPart1				; + 6 cycles (JSR)
!zone	
		LDA $C050 	; 4
		INC Temp	; 5
		LDA Temp	; 3 = 12
	
		LDA $C051	; 4
		NOP
		NOP			; 4 = 8

		LDA $C050 	; 4
		INC Temp	; 5
		LDA Temp	; 3 = 12
		
		LDA $C051	; 4
		SBC (Temp,X); 6
		SBC (Temp,X); 6
		INC Temp	; 5 = 21

		RTS			; 6
; -------------------------------------
WPart2				; + 6 cycles (JSR)
!zone	
		LDA $C050	; 4 = 4
		
		LDA $C051	; 4
		LDX #03
.BW1	DEX
		BNE .BW1	; 16 
					; = 20

		LDA $C050	; 4
		LDA $C051	; 4
		
		LDX #04
.BW2	DEX
		BNE .BW2	; 21 

		RTS			; 6
; -------------------------------------
WPart3				; + 6 cycles (JSR)
!zone	
		LDA $C050	; 4
		NOP
		NOP			; 4 = 8

		LDA $C051	; 4
		SBC (Temp,X); 6
		SBC (Temp,X); 6 = 16

		LDA $C050	; 4
		LDA $C051	; 4
		
		LDX #04
.BW1	DEX
		BNE .BW1	; 21 
		
		RTS			; 6
; -------------------------------------

; -----------------------------------------------------------------------------
; = Routine WAIT ======================
; = attend Y * 65 cycles exactement (JSR/RTS compris -> APPEL EN 11 cycles obligatoire)
!align 255,0
WAIT
!zone           
		DEY								
		BEQ .S1						
                  
.WL1 	LDX #$0B				            
.WL2 	DEX							
		BNE .WL2																
                      
		NOP								
		NOP								
		DEY								
		BNE .WL1						
																                      
		LDX #$08					                   
.WL3 	DEX							
		BNE .WL3						
                							
		NOP								
		NOP								
		RTS								
											         
.S1	 	LDX #08					                    
.WL4 	DEX							
		BNE .WL4						
																	
		NOP								
		RTS
; =============================================================================
COUNTREF !byte 0
; -----------------------------------------------------------------------------
!align 255,0
;.............0000000000111111111122222222223333333333
;.............0123456789012345678901234567890123456789
Title1 !text " _____ _____ _____ _____ __ __          "    
Title2 !text "|     | __  |  _  |__   |  |  |         "   
Title3 !text "|   --|    -|     |   __|_   _|         "   
Title4 !text "|_____|__|__|__|__|_____| |_|           "     
Title5 !text "    _____ __ __ _____ __    _____ _____ " 
Title6 !text "   |     |  |  |     |  |  |   __|   __|"
!align 255,0
Title7 !text "   |   --|_   _|   --|  |__|   __|__   |"
Title8 !text "   |_____| |_| |_____|_____|_____|_____|"

TableAffiche 	!byte 01,00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,09,08,07,06,05,04,03,02
TableEfface 	!byte 00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,09,08,07,06,05,04,03,02,01
	
!align 255,0
STAR_Y 			!byte 00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28
STAR_X 			!byte 39,38,36,34,33,31,30,20,10,12,28,22,23,30,32,25,15,12,33,31,30,20,10,12,28,22,38,30,25
STAR_SPEED  	!byte 05,01,02,03,05,10,01,05,01,10,08,06,01,08,10,05,02,10,01,05,02,03,05,10,01,05,01,10,08
STAR_BASE_SPEED	!byte 05,01,02,03,05,10,01,05,01,10,08,06,01,08,10,05,02,10,01,05,02,03,05,10,01,05,01,10,08

THB !byte  0x28 , 0xa8 , 0xa8 , 0xa8 , 0x28 , 0x28 , 0x28 , 0xa8 , 0xa8 , 0x28 , 0x28 , 0x28 , 0xa8 , 0xa8 , 0xa8 , 0x50 , 0x50 , 0xd0 , 0xd0 , 0xd0 , 0x50 , 0x50 , 0x50 , 0xd0 , 0xd0 , 0x50 , 0x50 , 0x50 , 0xd0
THH !byte  0x35 , 0x21 , 0x2d , 0x39 , 0x26 , 0x32 , 0x3e , 0x2a , 0x36 , 0x23 , 0x2f , 0x3b , 0x27 , 0x33 , 0x3f , 0x28 , 0x34 , 0x20 , 0x2c , 0x38 , 0x25 , 0x31 , 0x3d , 0x29 , 0x35 , 0x22 , 0x2e , 0x3a , 0x26

!align 255,0			; on aligne sur un début de page pour maintenir les cycles constants avec le LDA,X
StringText	!Text "JUST A RANDOM SCROLL TEXT (HEY, HAVE YOU EVER SEEN A DEMO WITHOUT A SCROLL?!) TO EMPHASIZE THE FACT THAT THE 'FT' ANIMATION THANKS TO A HORIZONTAL DESYNCHRONISATION. AND - OF COURSE - THE TINY STARFIELD IS HIRES! AS USUAL, KIDS, DON'T TRY THIS AT HOME (ESPECIALLY IN C)! GREETZ TO MY FRIENDS ANTOINE AND JEAN-MARC! THIS ONE GOES OUT TO BRENDAN, MICHAEL AND TOM! I KNOW OUR DEMOS ARE HEADACHE FOR EMULATORS. GOOD LUCK GUYS!"
			!fill 40,$A0
			!byte $FF